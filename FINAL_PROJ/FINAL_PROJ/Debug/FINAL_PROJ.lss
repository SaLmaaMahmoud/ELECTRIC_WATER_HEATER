
FINAL_PROJ.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000c6  00000000  00000000  000000f4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000d79  2**0
                  ALLOC, LOAD, DATA
  2 .bss          00000032  00800060  00800060  00000d79  2**0
                  ALLOC
  3 .comment      0000002f  00000000  00000000  00000d79  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000330  00000000  00000000  00000da8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000411f  00000000  00000000  000010d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000109e  00000000  00000000  000051f7  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001479  00000000  00000000  00006295  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000005b4  00000000  00000000  00007710  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000534  00000000  00000000  00007cc4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000b92  00000000  00000000  000081f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000250  00000000  00000000  00008d8a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .text         00000004  00000c70  00000c70  00000d64  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00008fdc  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .text.ADC_voidInit 00000032  000009f8  000009f8  00000aec  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.ADC_u16SelectChannel 00000010  00000bd0  00000bd0  00000cc4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.ADC_u16GetData 00000006  00000c58  00000c58  00000d4c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.ADC_StartConversion 00000008  00000c50  00000c50  00000d44  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.cooling_Init 0000000c  00000bfe  00000bfe  00000cf2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text.cooling_set_state 00000020  00000abe  00000abe  00000bb2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .text.EEPROM_Init 00000006  00000c5e  00000c5e  00000d52  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 21 .text.EEPROM_Write 00000028  00000a2a  00000a2a  00000b1e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 22 .text.OFF_STATE 00000016  00000b94  00000b94  00000c88  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 23 .text.EXT_voidEnableExtInt 000000d2  00000372  00000372  00000466  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 24 .text.GPIO_voidSetPortDirection 00000058  0000083a  0000083a  0000092e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 25 .text.GPIO_voidSetPortPinDirection 000000ea  000000c6  000000c6  000001ba  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 26 .text.GPIO_voidSetPortPinValue 000000ea  000001b0  000001b0  000002a4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 27 .text.GPIO_voidSetPortValue 00000020  00000ade  00000ade  00000bd2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 28 .text.GPIO_voidTogglePortPinValue 00000068  00000644  00000644  00000738  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 29 .text.GPIO_u8GetPortValue 00000024  00000a78  00000a78  00000b6c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 30 .text.heating_Init 0000000c  00000c0a  00000c0a  00000cfe  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 31 .text.heating_set_state 00000020  00000afe  00000afe  00000bf2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 32 .text.I2C_Init 00000012  00000bbe  00000bbe  00000cb2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 33 .text.TWIStart 0000000c  00000c16  00000c16  00000d0a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 34 .text.TWIStop 00000006  00000c64  00000c64  00000d58  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 35 .text.TWIWrite 0000000e  00000bf0  00000bf0  00000ce4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 36 .text.LED_ON  0000000c  00000c22  00000c22  00000d16  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 37 .text.LED_OFF 0000000c  00000c2e  00000c2e  00000d22  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 38 .text.LED_Init 00000010  00000be0  00000be0  00000cd4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 39 .text.LED_Blink 0000000a  00000c46  00000c46  00000d3a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 40 .text.LM35_Init 0000001a  00000b7a  00000b7a  00000c6e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 41 .text.LM35_Temp_Avg 00000038  000009c0  000009c0  00000ab4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 42 .text.LM35_Read_Temp 0000004c  000008ea  000008ea  000009de  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 43 .text.Save_Last_Temp 0000000c  00000c3a  00000c3a  00000d2e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 44 .bss.i        00000001  008000b4  008000b4  00000d79  2**0
                  ALLOC
 45 .bss.Temp_Reading_array 00000014  00800092  00800092  00000d79  2**0
                  ALLOC
 46 .text.main    00000072  00000562  00000562  00000656  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 47 .text.__vector_3 00000066  00000714  00000714  00000808  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 48 .data.current_mode 00000001  008000b5  00000c82  00000d76  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 49 .text.SCH_Add_Task 00000068  000006ac  000006ac  000007a0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 50 .text.SCH_Start 00000004  00000c74  00000c74  00000d68  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 51 .text.SCH_Delete_Task 00000060  0000077a  0000077a  0000086e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 52 .text.SCH_Init_T1 00000046  00000936  00000936  00000a2a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 53 .text.SCH_Go_To_Sleep 00000014  00000baa  00000baa  00000c9e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 54 .text.SCH_Dispatch_Tasks 00000060  000007da  000007da  000008ce  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 55 .text.SCH_Update 00000094  00000444  00000444  00000538  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 56 .text.__vector_7 00000058  00000892  00000892  00000986  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 57 .bss.Error_Code_G 00000002  008000b0  008000b0  00000d79  2**0
                  ALLOC
 58 .text.SSD_TURN_OFF 0000001e  00000b3e  00000b3e  00000c32  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 59 .text.SSD_Init 00000022  00000a9c  00000a9c  00000b90  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 60 .text.SSD_BLINK 00000026  00000a52  00000a52  00000b46  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 61 .text.segment7_display 0000008a  000004d8  000004d8  000005cc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 62 .text.SSD_UPDATE 00000020  00000b1e  00000b1e  00000c12  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 63 .data.ssd     0000000a  008000a6  00000c78  00000d6c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 64 .data.SSD_Disp 00000001  008000b6  00000c83  00000d77  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 65 .data.SSD_MODE 00000001  008000b7  00000c84  00000d78  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 66 .text.SW_Init 00000044  0000097c  0000097c  00000a70  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 67 .text.Heat_Cool_Elements 00000070  000005d4  000005d4  000006c8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 68 .text.Get_Current_Temp 00000006  00000c6a  00000c6a  00000d5e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 69 .text.SW_ST   000000d8  0000029a  0000029a  0000038e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 70 .bss.set_temp 00000001  008000b8  008000b8  00000d79  2**0
                  ALLOC
 71 .bss.setting_state_flag 00000002  008000b2  008000b2  00000d79  2**0
                  ALLOC
 72 .text.libgcc.mul 0000001e  00000b5c  00000b5c  00000c50  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 39 00 	jmp	0x72	; 0x72 <__ctors_end>
   4:	0c 94 38 06 	jmp	0xc70	; 0xc70 <__bad_interrupt>
   8:	0c 94 38 06 	jmp	0xc70	; 0xc70 <__bad_interrupt>
   c:	0c 94 8a 03 	jmp	0x714	; 0x714 <__vector_3>
  10:	0c 94 38 06 	jmp	0xc70	; 0xc70 <__bad_interrupt>
  14:	0c 94 38 06 	jmp	0xc70	; 0xc70 <__bad_interrupt>
  18:	0c 94 38 06 	jmp	0xc70	; 0xc70 <__bad_interrupt>
  1c:	0c 94 49 04 	jmp	0x892	; 0x892 <__vector_7>
  20:	0c 94 38 06 	jmp	0xc70	; 0xc70 <__bad_interrupt>
  24:	0c 94 38 06 	jmp	0xc70	; 0xc70 <__bad_interrupt>
  28:	0c 94 38 06 	jmp	0xc70	; 0xc70 <__bad_interrupt>
  2c:	0c 94 38 06 	jmp	0xc70	; 0xc70 <__bad_interrupt>
  30:	0c 94 38 06 	jmp	0xc70	; 0xc70 <__bad_interrupt>
  34:	0c 94 38 06 	jmp	0xc70	; 0xc70 <__bad_interrupt>
  38:	0c 94 38 06 	jmp	0xc70	; 0xc70 <__bad_interrupt>
  3c:	0c 94 38 06 	jmp	0xc70	; 0xc70 <__bad_interrupt>
  40:	0c 94 38 06 	jmp	0xc70	; 0xc70 <__bad_interrupt>
  44:	0c 94 38 06 	jmp	0xc70	; 0xc70 <__bad_interrupt>
  48:	0c 94 38 06 	jmp	0xc70	; 0xc70 <__bad_interrupt>
  4c:	0c 94 38 06 	jmp	0xc70	; 0xc70 <__bad_interrupt>
  50:	0c 94 38 06 	jmp	0xc70	; 0xc70 <__bad_interrupt>

00000054 <.dinit>:
  54:	00 60       	ori	r16, 0x00	; 0
  56:	00 a6       	std	Z+40, r0	; 0x28
  58:	80 00       	.word	0x0080	; ????
  5a:	a6 00       	.word	0x00a6	; ????
  5c:	b0 00       	.word	0x00b0	; ????
  5e:	0c 78       	andi	r16, 0x8C	; 140
  60:	00 b0       	in	r0, 0x00	; 0
  62:	00 b5       	in	r16, 0x20	; 32
  64:	80 00       	.word	0x0080	; ????
  66:	b5 00       	.word	0x00b5	; ????
  68:	b8 00       	.word	0x00b8	; ????
  6a:	0c 82       	std	Y+4, r0	; 0x04
  6c:	00 b8       	out	0x00, r0	; 0
  6e:	00 b9       	out	0x00, r16	; 0
  70:	80 00       	.word	0x0080	; ????

00000072 <__ctors_end>:
  72:	11 24       	eor	r1, r1
  74:	1f be       	out	0x3f, r1	; 63
  76:	cf e5       	ldi	r28, 0x5F	; 95
  78:	d8 e0       	ldi	r29, 0x08	; 8
  7a:	de bf       	out	0x3e, r29	; 62
  7c:	cd bf       	out	0x3d, r28	; 61

0000007e <__do_copy_data>:
  7e:	e4 e5       	ldi	r30, 0x54	; 84
  80:	f0 e0       	ldi	r31, 0x00	; 0
  82:	40 e0       	ldi	r20, 0x00	; 0
  84:	17 c0       	rjmp	.+46     	; 0xb4 <__do_clear_bss+0x8>
  86:	b5 91       	lpm	r27, Z+
  88:	a5 91       	lpm	r26, Z+
  8a:	35 91       	lpm	r19, Z+
  8c:	25 91       	lpm	r18, Z+
  8e:	05 91       	lpm	r16, Z+
  90:	07 fd       	sbrc	r16, 7
  92:	0c c0       	rjmp	.+24     	; 0xac <__do_clear_bss>
  94:	95 91       	lpm	r25, Z+
  96:	85 91       	lpm	r24, Z+
  98:	ef 01       	movw	r28, r30
  9a:	f9 2f       	mov	r31, r25
  9c:	e8 2f       	mov	r30, r24
  9e:	05 90       	lpm	r0, Z+
  a0:	0d 92       	st	X+, r0
  a2:	a2 17       	cp	r26, r18
  a4:	b3 07       	cpc	r27, r19
  a6:	d9 f7       	brne	.-10     	; 0x9e <__do_copy_data+0x20>
  a8:	fe 01       	movw	r30, r28
  aa:	04 c0       	rjmp	.+8      	; 0xb4 <__do_clear_bss+0x8>

000000ac <__do_clear_bss>:
  ac:	1d 92       	st	X+, r1
  ae:	a2 17       	cp	r26, r18
  b0:	b3 07       	cpc	r27, r19
  b2:	e1 f7       	brne	.-8      	; 0xac <__do_clear_bss>
  b4:	e1 37       	cpi	r30, 0x71	; 113
  b6:	f4 07       	cpc	r31, r20
  b8:	31 f7       	brne	.-52     	; 0x86 <__do_copy_data+0x8>
  ba:	0e 94 b1 02 	call	0x562	; 0x562 <main>
  be:	0c 94 61 00 	jmp	0xc2	; 0xc2 <_exit>

000000c2 <_exit>:
  c2:	f8 94       	cli

000000c4 <__stop_program>:
  c4:	ff cf       	rjmp	.-2      	; 0xc4 <__stop_program>

Disassembly of section .text:

00000c70 <__bad_interrupt>:
 c70:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

Disassembly of section .text.ADC_voidInit:

000009f8 <ADC_voidInit>:
	u16 Loc_u16ADC = ADC_u16GetData() ;
	
	u32 V_in = (Loc_u16ADC * V_REF) / (10*1024) ;
	
	return V_in ;
}
 9f8:	86 b1       	in	r24, 0x06	; 6
 9fa:	80 68       	ori	r24, 0x80	; 128
 9fc:	86 b9       	out	0x06, r24	; 6
 9fe:	87 b1       	in	r24, 0x07	; 7
 a00:	8f 77       	andi	r24, 0x7F	; 127
 a02:	87 b9       	out	0x07, r24	; 7
 a04:	87 b1       	in	r24, 0x07	; 7
 a06:	80 64       	ori	r24, 0x40	; 64
 a08:	87 b9       	out	0x07, r24	; 7
 a0a:	87 b1       	in	r24, 0x07	; 7
 a0c:	8f 7d       	andi	r24, 0xDF	; 223
 a0e:	87 b9       	out	0x07, r24	; 7
 a10:	86 b1       	in	r24, 0x06	; 6
 a12:	8f 7d       	andi	r24, 0xDF	; 223
 a14:	86 b9       	out	0x06, r24	; 6
 a16:	86 b1       	in	r24, 0x06	; 6
 a18:	81 60       	ori	r24, 0x01	; 1
 a1a:	86 b9       	out	0x06, r24	; 6
 a1c:	86 b1       	in	r24, 0x06	; 6
 a1e:	82 60       	ori	r24, 0x02	; 2
 a20:	86 b9       	out	0x06, r24	; 6
 a22:	86 b1       	in	r24, 0x06	; 6
 a24:	84 60       	ori	r24, 0x04	; 4
 a26:	86 b9       	out	0x06, r24	; 6
 a28:	08 95       	ret

Disassembly of section .text.ADC_u16SelectChannel:

00000bd0 <ADC_u16SelectChannel>:
 bd0:	97 b1       	in	r25, 0x07	; 7
 bd2:	90 7e       	andi	r25, 0xE0	; 224
 bd4:	97 b9       	out	0x07, r25	; 7
 bd6:	97 b1       	in	r25, 0x07	; 7
 bd8:	87 70       	andi	r24, 0x07	; 7
 bda:	98 2b       	or	r25, r24
 bdc:	97 b9       	out	0x07, r25	; 7
 bde:	08 95       	ret

Disassembly of section .text.ADC_u16GetData:

00000c58 <ADC_u16GetData>:
	AD_MUX |= (channel & 0b111) ;
}

u16 ADC_u16GetData()
{
	return ADC ;
 c58:	84 b1       	in	r24, 0x04	; 4
 c5a:	95 b1       	in	r25, 0x05	; 5
}
 c5c:	08 95       	ret

Disassembly of section .text.ADC_StartConversion:

00000c50 <ADC_StartConversion>:
	return V_in ;
}

void ADC_StartConversion(void)
{
	SET_BIT(ADCSRA , ADSC) ;				//Start the conversion
 c50:	86 b1       	in	r24, 0x06	; 6
 c52:	80 64       	ori	r24, 0x40	; 64
 c54:	86 b9       	out	0x06, r24	; 6
 c56:	08 95       	ret

Disassembly of section .text.cooling_Init:

00000bfe <cooling_Init>:

#include "cooling_fan.h"

void cooling_Init(void)
{
	GPIO_voidSetPortPinDirection(COOLING_PORT , COOLING_PIN , COOLING_DIR) ;
 bfe:	41 e0       	ldi	r20, 0x01	; 1
 c00:	67 e0       	ldi	r22, 0x07	; 7
 c02:	82 e0       	ldi	r24, 0x02	; 2
 c04:	0e 94 63 00 	call	0xc6	; 0xc6 <_etext>
 c08:	08 95       	ret

Disassembly of section .text.cooling_set_state:

00000abe <cooling_set_state>:
}

void cooling_set_state(u8 state)
{
	switch (state)
 abe:	88 23       	and	r24, r24
 ac0:	41 f0       	breq	.+16     	; 0xad2 <cooling_set_state+0x14>
 ac2:	81 30       	cpi	r24, 0x01	; 1
 ac4:	59 f4       	brne	.+22     	; 0xadc <cooling_set_state+0x1e>
	{
		case cool_ON :
			GPIO_voidSetPortPinValue(COOLING_PORT , COOLING_PIN , 1) ;
 ac6:	41 e0       	ldi	r20, 0x01	; 1
 ac8:	67 e0       	ldi	r22, 0x07	; 7
 aca:	82 e0       	ldi	r24, 0x02	; 2
 acc:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <GPIO_voidSetPortPinValue>
			break;
 ad0:	08 95       	ret
			
		case cool_OFF :
			GPIO_voidSetPortPinValue(COOLING_PORT , COOLING_PIN , 0) ;
 ad2:	40 e0       	ldi	r20, 0x00	; 0
 ad4:	67 e0       	ldi	r22, 0x07	; 7
 ad6:	82 e0       	ldi	r24, 0x02	; 2
 ad8:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <GPIO_voidSetPortPinValue>
 adc:	08 95       	ret

Disassembly of section .text.EEPROM_Init:

00000c5e <EEPROM_Init>:

#include "EEPROM.h"

void EEPROM_Init(void)
{
	I2C_Init();
 c5e:	0e 94 df 05 	call	0xbbe	; 0xbbe <I2C_Init>
 c62:	08 95       	ret

Disassembly of section .text.EEPROM_Write:

00000a2a <EEPROM_Write>:
}

void EEPROM_Write (u8 data, u8 address)
{
 a2a:	cf 93       	push	r28
 a2c:	df 93       	push	r29
 a2e:	c8 2f       	mov	r28, r24
 a30:	d6 2f       	mov	r29, r22
	TWIStart( ) ;
 a32:	0e 94 0b 06 	call	0xc16	; 0xc16 <TWIStart>
	
	TWIWrite( 0xA0 ) ;				//Write Mode
 a36:	80 ea       	ldi	r24, 0xA0	; 160
 a38:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <TWIWrite>
	TWIWrite( address ) ;
 a3c:	8d 2f       	mov	r24, r29
 a3e:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <TWIWrite>
	TWIWrite( data ) ;
 a42:	8c 2f       	mov	r24, r28
 a44:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <TWIWrite>
	
	TWIStop( ) ;
 a48:	0e 94 32 06 	call	0xc64	; 0xc64 <TWIStop>
}
 a4c:	df 91       	pop	r29
 a4e:	cf 91       	pop	r28
 a50:	08 95       	ret

Disassembly of section .text.OFF_STATE:

00000b94 <OFF_STATE>:
*/


void OFF_STATE(void)
{
	cooling_set_state(cool_OFF) ;
 b94:	80 e0       	ldi	r24, 0x00	; 0
 b96:	0e 94 5f 05 	call	0xabe	; 0xabe <cooling_set_state>
	heating_set_state(heat_OFF) ;
 b9a:	80 e0       	ldi	r24, 0x00	; 0
 b9c:	0e 94 7f 05 	call	0xafe	; 0xafe <heating_set_state>
	SSD_TURN_OFF() ;
 ba0:	0e 94 9f 05 	call	0xb3e	; 0xb3e <SSD_TURN_OFF>
	LED_OFF() ;
 ba4:	0e 94 17 06 	call	0xc2e	; 0xc2e <LED_OFF>
 ba8:	08 95       	ret

Disassembly of section .text.EXT_voidEnableExtInt:

00000372 <EXT_voidEnableExtInt>:


void EXT_voidEnableExtInt(t_EXT_INT cpy_ext_int , t_TRIGGERING_CONDITION cpy_condition) 
{
	// Enable global interrupts
	sei() ;
 372:	78 94       	sei
	
	// Enable EXT INT
	switch (cpy_ext_int){
 374:	81 30       	cpi	r24, 0x01	; 1
 376:	41 f0       	breq	.+16     	; 0x388 <EXT_voidEnableExtInt+0x16>
 378:	18 f0       	brcs	.+6      	; 0x380 <EXT_voidEnableExtInt+0xe>
 37a:	82 30       	cpi	r24, 0x02	; 2
 37c:	49 f0       	breq	.+18     	; 0x390 <EXT_voidEnableExtInt+0x1e>
 37e:	0b c0       	rjmp	.+22     	; 0x396 <EXT_voidEnableExtInt+0x24>
		case EXT_INT_0 :
			SET_BIT(GICR_R , 6) ;
 380:	9b b7       	in	r25, 0x3b	; 59
 382:	90 64       	ori	r25, 0x40	; 64
 384:	9b bf       	out	0x3b, r25	; 59
			break;
 386:	07 c0       	rjmp	.+14     	; 0x396 <EXT_voidEnableExtInt+0x24>
			
		case EXT_INT_1 :
			SET_BIT(GICR_R , 7) ;
 388:	9b b7       	in	r25, 0x3b	; 59
 38a:	90 68       	ori	r25, 0x80	; 128
 38c:	9b bf       	out	0x3b, r25	; 59
			break;
 38e:	03 c0       	rjmp	.+6      	; 0x396 <EXT_voidEnableExtInt+0x24>
			
		case EXT_INT_2 :
			SET_BIT(GICR_R , 5) ;
 390:	9b b7       	in	r25, 0x3b	; 59
 392:	90 62       	ori	r25, 0x20	; 32
 394:	9b bf       	out	0x3b, r25	; 59
			break;
	}
	
	// Sensing level
	switch (cpy_condition){
 396:	61 30       	cpi	r22, 0x01	; 1
 398:	c1 f0       	breq	.+48     	; 0x3ca <EXT_voidEnableExtInt+0x58>
 39a:	28 f0       	brcs	.+10     	; 0x3a6 <EXT_voidEnableExtInt+0x34>
 39c:	62 30       	cpi	r22, 0x02	; 2
 39e:	31 f1       	breq	.+76     	; 0x3ec <EXT_voidEnableExtInt+0x7a>
 3a0:	63 30       	cpi	r22, 0x03	; 3
 3a2:	d1 f1       	breq	.+116    	; 0x418 <__EEPROM_REGION_LENGTH__+0x18>
 3a4:	08 95       	ret
		case LOW_LEVEL :
			if (cpy_ext_int == EXT_INT_0)
 3a6:	81 11       	cpse	r24, r1
 3a8:	06 c0       	rjmp	.+12     	; 0x3b6 <EXT_voidEnableExtInt+0x44>
			{
				CLEAR_BIT(MCUCR_R , ISC00) ;
 3aa:	95 b7       	in	r25, 0x35	; 53
 3ac:	9e 7f       	andi	r25, 0xFE	; 254
 3ae:	95 bf       	out	0x35, r25	; 53
				CLEAR_BIT(MCUCR_R , ISC01) ;
 3b0:	95 b7       	in	r25, 0x35	; 53
 3b2:	9d 7f       	andi	r25, 0xFD	; 253
 3b4:	95 bf       	out	0x35, r25	; 53
			}
			if (cpy_ext_int == EXT_INT_1)
 3b6:	81 30       	cpi	r24, 0x01	; 1
 3b8:	09 f0       	breq	.+2      	; 0x3bc <EXT_voidEnableExtInt+0x4a>
 3ba:	43 c0       	rjmp	.+134    	; 0x442 <__EEPROM_REGION_LENGTH__+0x42>
			{
				CLEAR_BIT(MCUCR_R , ISC10) ;
 3bc:	85 b7       	in	r24, 0x35	; 53
 3be:	8b 7f       	andi	r24, 0xFB	; 251
 3c0:	85 bf       	out	0x35, r24	; 53
				CLEAR_BIT(MCUCR_R , ISC11) ;
 3c2:	85 b7       	in	r24, 0x35	; 53
 3c4:	87 7f       	andi	r24, 0xF7	; 247
 3c6:	85 bf       	out	0x35, r24	; 53
 3c8:	08 95       	ret
			}
			break;
			
		case ON_CHAGE :
			if (cpy_ext_int == EXT_INT_0)
 3ca:	81 11       	cpse	r24, r1
 3cc:	06 c0       	rjmp	.+12     	; 0x3da <EXT_voidEnableExtInt+0x68>
			{
				SET_BIT(MCUCR_R , ISC00) ;
 3ce:	95 b7       	in	r25, 0x35	; 53
 3d0:	91 60       	ori	r25, 0x01	; 1
 3d2:	95 bf       	out	0x35, r25	; 53
				CLEAR_BIT(MCUCR_R , ISC01) ;
 3d4:	95 b7       	in	r25, 0x35	; 53
 3d6:	9d 7f       	andi	r25, 0xFD	; 253
 3d8:	95 bf       	out	0x35, r25	; 53
			}
			if (cpy_ext_int == EXT_INT_1)
 3da:	81 30       	cpi	r24, 0x01	; 1
 3dc:	91 f5       	brne	.+100    	; 0x442 <__EEPROM_REGION_LENGTH__+0x42>
			{
				SET_BIT(MCUCR_R , ISC10) ;
 3de:	85 b7       	in	r24, 0x35	; 53
 3e0:	84 60       	ori	r24, 0x04	; 4
 3e2:	85 bf       	out	0x35, r24	; 53
				CLEAR_BIT(MCUCR_R , ISC11) ;
 3e4:	85 b7       	in	r24, 0x35	; 53
 3e6:	87 7f       	andi	r24, 0xF7	; 247
 3e8:	85 bf       	out	0x35, r24	; 53
 3ea:	08 95       	ret
			}
			break;
		
		case FALLIN_EDGE :
			if (cpy_ext_int == EXT_INT_0)
 3ec:	81 11       	cpse	r24, r1
 3ee:	06 c0       	rjmp	.+12     	; 0x3fc <EXT_voidEnableExtInt+0x8a>
			{
				CLEAR_BIT(MCUCR_R , ISC00) ;
 3f0:	95 b7       	in	r25, 0x35	; 53
 3f2:	9e 7f       	andi	r25, 0xFE	; 254
 3f4:	95 bf       	out	0x35, r25	; 53
				SET_BIT(MCUCR_R , ISC01) ;
 3f6:	95 b7       	in	r25, 0x35	; 53
 3f8:	92 60       	ori	r25, 0x02	; 2
 3fa:	95 bf       	out	0x35, r25	; 53
			}
			if (cpy_ext_int == EXT_INT_1)
 3fc:	81 30       	cpi	r24, 0x01	; 1
 3fe:	31 f4       	brne	.+12     	; 0x40c <__EEPROM_REGION_LENGTH__+0xc>
			{
				CLEAR_BIT(MCUCR_R , ISC10) ;
 400:	95 b7       	in	r25, 0x35	; 53
 402:	9b 7f       	andi	r25, 0xFB	; 251
 404:	95 bf       	out	0x35, r25	; 53
				SET_BIT(MCUCR_R , ISC11) ;
 406:	95 b7       	in	r25, 0x35	; 53
 408:	98 60       	ori	r25, 0x08	; 8
 40a:	95 bf       	out	0x35, r25	; 53
			}
			if (cpy_ext_int == EXT_INT_2)
 40c:	82 30       	cpi	r24, 0x02	; 2
 40e:	c9 f4       	brne	.+50     	; 0x442 <__EEPROM_REGION_LENGTH__+0x42>
				CLEAR_BIT(MCUCSR_R , MCUCSR_ISC2) ;
 410:	84 b7       	in	r24, 0x34	; 52
 412:	8f 7b       	andi	r24, 0xBF	; 191
 414:	84 bf       	out	0x34, r24	; 52
 416:	08 95       	ret
			break;
		
		case RISIN_EDGE :
			if (cpy_ext_int == EXT_INT_0)
 418:	81 11       	cpse	r24, r1
 41a:	06 c0       	rjmp	.+12     	; 0x428 <__EEPROM_REGION_LENGTH__+0x28>
			{
				SET_BIT(MCUCR_R , ISC00) ;
 41c:	95 b7       	in	r25, 0x35	; 53
 41e:	91 60       	ori	r25, 0x01	; 1
 420:	95 bf       	out	0x35, r25	; 53
				SET_BIT(MCUCR_R , ISC01) ;
 422:	95 b7       	in	r25, 0x35	; 53
 424:	92 60       	ori	r25, 0x02	; 2
 426:	95 bf       	out	0x35, r25	; 53
			}
			if (cpy_ext_int == EXT_INT_1)
 428:	81 30       	cpi	r24, 0x01	; 1
 42a:	31 f4       	brne	.+12     	; 0x438 <__EEPROM_REGION_LENGTH__+0x38>
			{
				SET_BIT(MCUCR_R , ISC10) ;
 42c:	95 b7       	in	r25, 0x35	; 53
 42e:	94 60       	ori	r25, 0x04	; 4
 430:	95 bf       	out	0x35, r25	; 53
				SET_BIT(MCUCR_R , ISC11) ;
 432:	95 b7       	in	r25, 0x35	; 53
 434:	98 60       	ori	r25, 0x08	; 8
 436:	95 bf       	out	0x35, r25	; 53
			}
			if (cpy_ext_int == EXT_INT_2)
 438:	82 30       	cpi	r24, 0x02	; 2
 43a:	19 f4       	brne	.+6      	; 0x442 <__EEPROM_REGION_LENGTH__+0x42>
				SET_BIT(MCUCSR_R , MCUCSR_ISC2) ;
 43c:	84 b7       	in	r24, 0x34	; 52
 43e:	80 64       	ori	r24, 0x40	; 64
 440:	84 bf       	out	0x34, r24	; 52
 442:	08 95       	ret

Disassembly of section .text.GPIO_voidSetPortDirection:

0000083a <GPIO_voidSetPortDirection>:
			
		default: break;
	}
	
	return local_u8retval ;
}
 83a:	81 30       	cpi	r24, 0x01	; 1
 83c:	79 f0       	breq	.+30     	; 0x85c <GPIO_voidSetPortDirection+0x22>
 83e:	28 f0       	brcs	.+10     	; 0x84a <GPIO_voidSetPortDirection+0x10>
 840:	82 30       	cpi	r24, 0x02	; 2
 842:	a9 f0       	breq	.+42     	; 0x86e <__stack+0xf>
 844:	83 30       	cpi	r24, 0x03	; 3
 846:	e1 f0       	breq	.+56     	; 0x880 <__stack+0x21>
 848:	08 95       	ret
 84a:	61 30       	cpi	r22, 0x01	; 1
 84c:	19 f4       	brne	.+6      	; 0x854 <GPIO_voidSetPortDirection+0x1a>
 84e:	8f ef       	ldi	r24, 0xFF	; 255
 850:	8a bb       	out	0x1a, r24	; 26
 852:	08 95       	ret
 854:	61 11       	cpse	r22, r1
 856:	1c c0       	rjmp	.+56     	; 0x890 <__stack+0x31>
 858:	1a ba       	out	0x1a, r1	; 26
 85a:	08 95       	ret
 85c:	61 30       	cpi	r22, 0x01	; 1
 85e:	19 f4       	brne	.+6      	; 0x866 <__stack+0x7>
 860:	8f ef       	ldi	r24, 0xFF	; 255
 862:	87 bb       	out	0x17, r24	; 23
 864:	08 95       	ret
 866:	61 11       	cpse	r22, r1
 868:	13 c0       	rjmp	.+38     	; 0x890 <__stack+0x31>
 86a:	17 ba       	out	0x17, r1	; 23
 86c:	08 95       	ret
 86e:	61 30       	cpi	r22, 0x01	; 1
 870:	19 f4       	brne	.+6      	; 0x878 <__stack+0x19>
 872:	8f ef       	ldi	r24, 0xFF	; 255
 874:	84 bb       	out	0x14, r24	; 20
 876:	08 95       	ret
 878:	61 11       	cpse	r22, r1
 87a:	0a c0       	rjmp	.+20     	; 0x890 <__stack+0x31>
 87c:	14 ba       	out	0x14, r1	; 20
 87e:	08 95       	ret
 880:	61 30       	cpi	r22, 0x01	; 1
 882:	19 f4       	brne	.+6      	; 0x88a <__stack+0x2b>
 884:	8f ef       	ldi	r24, 0xFF	; 255
 886:	81 bb       	out	0x11, r24	; 17
 888:	08 95       	ret
 88a:	61 11       	cpse	r22, r1
 88c:	01 c0       	rjmp	.+2      	; 0x890 <__stack+0x31>
 88e:	11 ba       	out	0x11, r1	; 17
 890:	08 95       	ret

Disassembly of section .text.GPIO_voidSetPortPinDirection:

000000c6 <GPIO_voidSetPortPinDirection>:
  c6:	81 30       	cpi	r24, 0x01	; 1
  c8:	11 f1       	breq	.+68     	; 0x10e <GPIO_voidSetPortPinDirection+0x48>
  ca:	30 f0       	brcs	.+12     	; 0xd8 <GPIO_voidSetPortPinDirection+0x12>
  cc:	82 30       	cpi	r24, 0x02	; 2
  ce:	d1 f1       	breq	.+116    	; 0x144 <GPIO_voidSetPortPinDirection+0x7e>
  d0:	83 30       	cpi	r24, 0x03	; 3
  d2:	09 f4       	brne	.+2      	; 0xd6 <GPIO_voidSetPortPinDirection+0x10>
  d4:	52 c0       	rjmp	.+164    	; 0x17a <GPIO_voidSetPortPinDirection+0xb4>
  d6:	08 95       	ret
  d8:	41 30       	cpi	r20, 0x01	; 1
  da:	59 f4       	brne	.+22     	; 0xf2 <GPIO_voidSetPortPinDirection+0x2c>
  dc:	2a b3       	in	r18, 0x1a	; 26
  de:	81 e0       	ldi	r24, 0x01	; 1
  e0:	90 e0       	ldi	r25, 0x00	; 0
  e2:	02 c0       	rjmp	.+4      	; 0xe8 <GPIO_voidSetPortPinDirection+0x22>
  e4:	88 0f       	add	r24, r24
  e6:	99 1f       	adc	r25, r25
  e8:	6a 95       	dec	r22
  ea:	e2 f7       	brpl	.-8      	; 0xe4 <GPIO_voidSetPortPinDirection+0x1e>
  ec:	82 2b       	or	r24, r18
  ee:	8a bb       	out	0x1a, r24	; 26
  f0:	08 95       	ret
  f2:	41 11       	cpse	r20, r1
  f4:	5c c0       	rjmp	.+184    	; 0x1ae <GPIO_voidSetPortPinDirection+0xe8>
  f6:	2a b3       	in	r18, 0x1a	; 26
  f8:	81 e0       	ldi	r24, 0x01	; 1
  fa:	90 e0       	ldi	r25, 0x00	; 0
  fc:	02 c0       	rjmp	.+4      	; 0x102 <GPIO_voidSetPortPinDirection+0x3c>
  fe:	88 0f       	add	r24, r24
 100:	99 1f       	adc	r25, r25
 102:	6a 95       	dec	r22
 104:	e2 f7       	brpl	.-8      	; 0xfe <GPIO_voidSetPortPinDirection+0x38>
 106:	80 95       	com	r24
 108:	82 23       	and	r24, r18
 10a:	8a bb       	out	0x1a, r24	; 26
 10c:	08 95       	ret
 10e:	41 30       	cpi	r20, 0x01	; 1
 110:	59 f4       	brne	.+22     	; 0x128 <GPIO_voidSetPortPinDirection+0x62>
 112:	27 b3       	in	r18, 0x17	; 23
 114:	81 e0       	ldi	r24, 0x01	; 1
 116:	90 e0       	ldi	r25, 0x00	; 0
 118:	02 c0       	rjmp	.+4      	; 0x11e <GPIO_voidSetPortPinDirection+0x58>
 11a:	88 0f       	add	r24, r24
 11c:	99 1f       	adc	r25, r25
 11e:	6a 95       	dec	r22
 120:	e2 f7       	brpl	.-8      	; 0x11a <GPIO_voidSetPortPinDirection+0x54>
 122:	82 2b       	or	r24, r18
 124:	87 bb       	out	0x17, r24	; 23
 126:	08 95       	ret
 128:	41 11       	cpse	r20, r1
 12a:	41 c0       	rjmp	.+130    	; 0x1ae <GPIO_voidSetPortPinDirection+0xe8>
 12c:	27 b3       	in	r18, 0x17	; 23
 12e:	81 e0       	ldi	r24, 0x01	; 1
 130:	90 e0       	ldi	r25, 0x00	; 0
 132:	02 c0       	rjmp	.+4      	; 0x138 <GPIO_voidSetPortPinDirection+0x72>
 134:	88 0f       	add	r24, r24
 136:	99 1f       	adc	r25, r25
 138:	6a 95       	dec	r22
 13a:	e2 f7       	brpl	.-8      	; 0x134 <GPIO_voidSetPortPinDirection+0x6e>
 13c:	80 95       	com	r24
 13e:	82 23       	and	r24, r18
 140:	87 bb       	out	0x17, r24	; 23
 142:	08 95       	ret
 144:	41 30       	cpi	r20, 0x01	; 1
 146:	59 f4       	brne	.+22     	; 0x15e <GPIO_voidSetPortPinDirection+0x98>
 148:	24 b3       	in	r18, 0x14	; 20
 14a:	81 e0       	ldi	r24, 0x01	; 1
 14c:	90 e0       	ldi	r25, 0x00	; 0
 14e:	02 c0       	rjmp	.+4      	; 0x154 <GPIO_voidSetPortPinDirection+0x8e>
 150:	88 0f       	add	r24, r24
 152:	99 1f       	adc	r25, r25
 154:	6a 95       	dec	r22
 156:	e2 f7       	brpl	.-8      	; 0x150 <GPIO_voidSetPortPinDirection+0x8a>
 158:	82 2b       	or	r24, r18
 15a:	84 bb       	out	0x14, r24	; 20
 15c:	08 95       	ret
 15e:	41 11       	cpse	r20, r1
 160:	26 c0       	rjmp	.+76     	; 0x1ae <GPIO_voidSetPortPinDirection+0xe8>
 162:	24 b3       	in	r18, 0x14	; 20
 164:	81 e0       	ldi	r24, 0x01	; 1
 166:	90 e0       	ldi	r25, 0x00	; 0
 168:	02 c0       	rjmp	.+4      	; 0x16e <GPIO_voidSetPortPinDirection+0xa8>
 16a:	88 0f       	add	r24, r24
 16c:	99 1f       	adc	r25, r25
 16e:	6a 95       	dec	r22
 170:	e2 f7       	brpl	.-8      	; 0x16a <GPIO_voidSetPortPinDirection+0xa4>
 172:	80 95       	com	r24
 174:	82 23       	and	r24, r18
 176:	84 bb       	out	0x14, r24	; 20
 178:	08 95       	ret
 17a:	41 30       	cpi	r20, 0x01	; 1
 17c:	59 f4       	brne	.+22     	; 0x194 <GPIO_voidSetPortPinDirection+0xce>
 17e:	21 b3       	in	r18, 0x11	; 17
 180:	81 e0       	ldi	r24, 0x01	; 1
 182:	90 e0       	ldi	r25, 0x00	; 0
 184:	02 c0       	rjmp	.+4      	; 0x18a <GPIO_voidSetPortPinDirection+0xc4>
 186:	88 0f       	add	r24, r24
 188:	99 1f       	adc	r25, r25
 18a:	6a 95       	dec	r22
 18c:	e2 f7       	brpl	.-8      	; 0x186 <GPIO_voidSetPortPinDirection+0xc0>
 18e:	82 2b       	or	r24, r18
 190:	81 bb       	out	0x11, r24	; 17
 192:	08 95       	ret
 194:	41 11       	cpse	r20, r1
 196:	0b c0       	rjmp	.+22     	; 0x1ae <GPIO_voidSetPortPinDirection+0xe8>
 198:	21 b3       	in	r18, 0x11	; 17
 19a:	81 e0       	ldi	r24, 0x01	; 1
 19c:	90 e0       	ldi	r25, 0x00	; 0
 19e:	02 c0       	rjmp	.+4      	; 0x1a4 <GPIO_voidSetPortPinDirection+0xde>
 1a0:	88 0f       	add	r24, r24
 1a2:	99 1f       	adc	r25, r25
 1a4:	6a 95       	dec	r22
 1a6:	e2 f7       	brpl	.-8      	; 0x1a0 <GPIO_voidSetPortPinDirection+0xda>
 1a8:	80 95       	com	r24
 1aa:	82 23       	and	r24, r18
 1ac:	81 bb       	out	0x11, r24	; 17
 1ae:	08 95       	ret

Disassembly of section .text.GPIO_voidSetPortPinValue:

000001b0 <GPIO_voidSetPortPinValue>:
 1b0:	81 30       	cpi	r24, 0x01	; 1
 1b2:	11 f1       	breq	.+68     	; 0x1f8 <GPIO_voidSetPortPinValue+0x48>
 1b4:	30 f0       	brcs	.+12     	; 0x1c2 <GPIO_voidSetPortPinValue+0x12>
 1b6:	82 30       	cpi	r24, 0x02	; 2
 1b8:	d1 f1       	breq	.+116    	; 0x22e <GPIO_voidSetPortPinValue+0x7e>
 1ba:	83 30       	cpi	r24, 0x03	; 3
 1bc:	09 f4       	brne	.+2      	; 0x1c0 <GPIO_voidSetPortPinValue+0x10>
 1be:	52 c0       	rjmp	.+164    	; 0x264 <GPIO_voidSetPortPinValue+0xb4>
 1c0:	08 95       	ret
 1c2:	41 30       	cpi	r20, 0x01	; 1
 1c4:	59 f4       	brne	.+22     	; 0x1dc <GPIO_voidSetPortPinValue+0x2c>
 1c6:	2b b3       	in	r18, 0x1b	; 27
 1c8:	81 e0       	ldi	r24, 0x01	; 1
 1ca:	90 e0       	ldi	r25, 0x00	; 0
 1cc:	02 c0       	rjmp	.+4      	; 0x1d2 <GPIO_voidSetPortPinValue+0x22>
 1ce:	88 0f       	add	r24, r24
 1d0:	99 1f       	adc	r25, r25
 1d2:	6a 95       	dec	r22
 1d4:	e2 f7       	brpl	.-8      	; 0x1ce <GPIO_voidSetPortPinValue+0x1e>
 1d6:	82 2b       	or	r24, r18
 1d8:	8b bb       	out	0x1b, r24	; 27
 1da:	08 95       	ret
 1dc:	41 11       	cpse	r20, r1
 1de:	5c c0       	rjmp	.+184    	; 0x298 <GPIO_voidSetPortPinValue+0xe8>
 1e0:	2b b3       	in	r18, 0x1b	; 27
 1e2:	81 e0       	ldi	r24, 0x01	; 1
 1e4:	90 e0       	ldi	r25, 0x00	; 0
 1e6:	02 c0       	rjmp	.+4      	; 0x1ec <GPIO_voidSetPortPinValue+0x3c>
 1e8:	88 0f       	add	r24, r24
 1ea:	99 1f       	adc	r25, r25
 1ec:	6a 95       	dec	r22
 1ee:	e2 f7       	brpl	.-8      	; 0x1e8 <GPIO_voidSetPortPinValue+0x38>
 1f0:	80 95       	com	r24
 1f2:	82 23       	and	r24, r18
 1f4:	8b bb       	out	0x1b, r24	; 27
 1f6:	08 95       	ret
 1f8:	41 30       	cpi	r20, 0x01	; 1
 1fa:	59 f4       	brne	.+22     	; 0x212 <GPIO_voidSetPortPinValue+0x62>
 1fc:	28 b3       	in	r18, 0x18	; 24
 1fe:	81 e0       	ldi	r24, 0x01	; 1
 200:	90 e0       	ldi	r25, 0x00	; 0
 202:	02 c0       	rjmp	.+4      	; 0x208 <GPIO_voidSetPortPinValue+0x58>
 204:	88 0f       	add	r24, r24
 206:	99 1f       	adc	r25, r25
 208:	6a 95       	dec	r22
 20a:	e2 f7       	brpl	.-8      	; 0x204 <GPIO_voidSetPortPinValue+0x54>
 20c:	82 2b       	or	r24, r18
 20e:	88 bb       	out	0x18, r24	; 24
 210:	08 95       	ret
 212:	41 11       	cpse	r20, r1
 214:	41 c0       	rjmp	.+130    	; 0x298 <GPIO_voidSetPortPinValue+0xe8>
 216:	28 b3       	in	r18, 0x18	; 24
 218:	81 e0       	ldi	r24, 0x01	; 1
 21a:	90 e0       	ldi	r25, 0x00	; 0
 21c:	02 c0       	rjmp	.+4      	; 0x222 <GPIO_voidSetPortPinValue+0x72>
 21e:	88 0f       	add	r24, r24
 220:	99 1f       	adc	r25, r25
 222:	6a 95       	dec	r22
 224:	e2 f7       	brpl	.-8      	; 0x21e <GPIO_voidSetPortPinValue+0x6e>
 226:	80 95       	com	r24
 228:	82 23       	and	r24, r18
 22a:	88 bb       	out	0x18, r24	; 24
 22c:	08 95       	ret
 22e:	41 30       	cpi	r20, 0x01	; 1
 230:	59 f4       	brne	.+22     	; 0x248 <GPIO_voidSetPortPinValue+0x98>
 232:	25 b3       	in	r18, 0x15	; 21
 234:	81 e0       	ldi	r24, 0x01	; 1
 236:	90 e0       	ldi	r25, 0x00	; 0
 238:	02 c0       	rjmp	.+4      	; 0x23e <GPIO_voidSetPortPinValue+0x8e>
 23a:	88 0f       	add	r24, r24
 23c:	99 1f       	adc	r25, r25
 23e:	6a 95       	dec	r22
 240:	e2 f7       	brpl	.-8      	; 0x23a <GPIO_voidSetPortPinValue+0x8a>
 242:	82 2b       	or	r24, r18
 244:	85 bb       	out	0x15, r24	; 21
 246:	08 95       	ret
 248:	41 11       	cpse	r20, r1
 24a:	26 c0       	rjmp	.+76     	; 0x298 <GPIO_voidSetPortPinValue+0xe8>
 24c:	25 b3       	in	r18, 0x15	; 21
 24e:	81 e0       	ldi	r24, 0x01	; 1
 250:	90 e0       	ldi	r25, 0x00	; 0
 252:	02 c0       	rjmp	.+4      	; 0x258 <GPIO_voidSetPortPinValue+0xa8>
 254:	88 0f       	add	r24, r24
 256:	99 1f       	adc	r25, r25
 258:	6a 95       	dec	r22
 25a:	e2 f7       	brpl	.-8      	; 0x254 <GPIO_voidSetPortPinValue+0xa4>
 25c:	80 95       	com	r24
 25e:	82 23       	and	r24, r18
 260:	85 bb       	out	0x15, r24	; 21
 262:	08 95       	ret
 264:	41 30       	cpi	r20, 0x01	; 1
 266:	59 f4       	brne	.+22     	; 0x27e <GPIO_voidSetPortPinValue+0xce>
 268:	22 b3       	in	r18, 0x12	; 18
 26a:	81 e0       	ldi	r24, 0x01	; 1
 26c:	90 e0       	ldi	r25, 0x00	; 0
 26e:	02 c0       	rjmp	.+4      	; 0x274 <GPIO_voidSetPortPinValue+0xc4>
 270:	88 0f       	add	r24, r24
 272:	99 1f       	adc	r25, r25
 274:	6a 95       	dec	r22
 276:	e2 f7       	brpl	.-8      	; 0x270 <GPIO_voidSetPortPinValue+0xc0>
 278:	82 2b       	or	r24, r18
 27a:	82 bb       	out	0x12, r24	; 18
 27c:	08 95       	ret
 27e:	41 11       	cpse	r20, r1
 280:	0b c0       	rjmp	.+22     	; 0x298 <GPIO_voidSetPortPinValue+0xe8>
 282:	22 b3       	in	r18, 0x12	; 18
 284:	81 e0       	ldi	r24, 0x01	; 1
 286:	90 e0       	ldi	r25, 0x00	; 0
 288:	02 c0       	rjmp	.+4      	; 0x28e <GPIO_voidSetPortPinValue+0xde>
 28a:	88 0f       	add	r24, r24
 28c:	99 1f       	adc	r25, r25
 28e:	6a 95       	dec	r22
 290:	e2 f7       	brpl	.-8      	; 0x28a <GPIO_voidSetPortPinValue+0xda>
 292:	80 95       	com	r24
 294:	82 23       	and	r24, r18
 296:	82 bb       	out	0x12, r24	; 18
 298:	08 95       	ret

Disassembly of section .text.GPIO_voidSetPortValue:

00000ade <GPIO_voidSetPortValue>:
	}
}

void GPIO_voidSetPortValue(u8 cpy_PORT , u8 cpy_value)
{
	switch( cpy_PORT ){
 ade:	81 30       	cpi	r24, 0x01	; 1
 ae0:	41 f0       	breq	.+16     	; 0xaf2 <GPIO_voidSetPortValue+0x14>
 ae2:	28 f0       	brcs	.+10     	; 0xaee <GPIO_voidSetPortValue+0x10>
 ae4:	82 30       	cpi	r24, 0x02	; 2
 ae6:	39 f0       	breq	.+14     	; 0xaf6 <GPIO_voidSetPortValue+0x18>
 ae8:	83 30       	cpi	r24, 0x03	; 3
 aea:	39 f0       	breq	.+14     	; 0xafa <GPIO_voidSetPortValue+0x1c>
 aec:	08 95       	ret
		case PORT_A :
			PORTA_R = cpy_value ;
 aee:	6b bb       	out	0x1b, r22	; 27
			break;
 af0:	08 95       	ret
		
		case PORT_B :
			PORTB_R = cpy_value ;
 af2:	68 bb       	out	0x18, r22	; 24
			break;
 af4:	08 95       	ret
			
		case PORT_C :
			PORTC_R = cpy_value ;
 af6:	65 bb       	out	0x15, r22	; 21
			break;
 af8:	08 95       	ret
			
		case PORT_D :
			PORTD_R = cpy_value ;
 afa:	62 bb       	out	0x12, r22	; 18
 afc:	08 95       	ret

Disassembly of section .text.GPIO_voidTogglePortPinValue:

00000644 <GPIO_voidTogglePortPinValue>:
			
		default: break;
	}
	
	return local_u8retval ;
}
 644:	81 30       	cpi	r24, 0x01	; 1
 646:	89 f0       	breq	.+34     	; 0x66a <GPIO_voidTogglePortPinValue+0x26>
 648:	28 f0       	brcs	.+10     	; 0x654 <GPIO_voidTogglePortPinValue+0x10>
 64a:	82 30       	cpi	r24, 0x02	; 2
 64c:	c9 f0       	breq	.+50     	; 0x680 <GPIO_voidTogglePortPinValue+0x3c>
 64e:	83 30       	cpi	r24, 0x03	; 3
 650:	11 f1       	breq	.+68     	; 0x696 <GPIO_voidTogglePortPinValue+0x52>
 652:	08 95       	ret
 654:	2b b3       	in	r18, 0x1b	; 27
 656:	81 e0       	ldi	r24, 0x01	; 1
 658:	90 e0       	ldi	r25, 0x00	; 0
 65a:	02 c0       	rjmp	.+4      	; 0x660 <GPIO_voidTogglePortPinValue+0x1c>
 65c:	88 0f       	add	r24, r24
 65e:	99 1f       	adc	r25, r25
 660:	6a 95       	dec	r22
 662:	e2 f7       	brpl	.-8      	; 0x65c <GPIO_voidTogglePortPinValue+0x18>
 664:	82 27       	eor	r24, r18
 666:	8b bb       	out	0x1b, r24	; 27
 668:	08 95       	ret
 66a:	28 b3       	in	r18, 0x18	; 24
 66c:	81 e0       	ldi	r24, 0x01	; 1
 66e:	90 e0       	ldi	r25, 0x00	; 0
 670:	02 c0       	rjmp	.+4      	; 0x676 <GPIO_voidTogglePortPinValue+0x32>
 672:	88 0f       	add	r24, r24
 674:	99 1f       	adc	r25, r25
 676:	6a 95       	dec	r22
 678:	e2 f7       	brpl	.-8      	; 0x672 <GPIO_voidTogglePortPinValue+0x2e>
 67a:	82 27       	eor	r24, r18
 67c:	88 bb       	out	0x18, r24	; 24
 67e:	08 95       	ret
 680:	25 b3       	in	r18, 0x15	; 21
 682:	81 e0       	ldi	r24, 0x01	; 1
 684:	90 e0       	ldi	r25, 0x00	; 0
 686:	02 c0       	rjmp	.+4      	; 0x68c <GPIO_voidTogglePortPinValue+0x48>
 688:	88 0f       	add	r24, r24
 68a:	99 1f       	adc	r25, r25
 68c:	6a 95       	dec	r22
 68e:	e2 f7       	brpl	.-8      	; 0x688 <GPIO_voidTogglePortPinValue+0x44>
 690:	82 27       	eor	r24, r18
 692:	85 bb       	out	0x15, r24	; 21
 694:	08 95       	ret
 696:	22 b3       	in	r18, 0x12	; 18
 698:	81 e0       	ldi	r24, 0x01	; 1
 69a:	90 e0       	ldi	r25, 0x00	; 0
 69c:	02 c0       	rjmp	.+4      	; 0x6a2 <GPIO_voidTogglePortPinValue+0x5e>
 69e:	88 0f       	add	r24, r24
 6a0:	99 1f       	adc	r25, r25
 6a2:	6a 95       	dec	r22
 6a4:	e2 f7       	brpl	.-8      	; 0x69e <GPIO_voidTogglePortPinValue+0x5a>
 6a6:	82 27       	eor	r24, r18
 6a8:	82 bb       	out	0x12, r24	; 18
 6aa:	08 95       	ret

Disassembly of section .text.GPIO_u8GetPortValue:

00000a78 <GPIO_u8GetPortValue>:

u8 GPIO_u8GetPortValue(u8 cpy_PORT)
{
	u8 local_u8retval = 0 ;
	
	switch ( cpy_PORT ){
 a78:	81 30       	cpi	r24, 0x01	; 1
 a7a:	41 f0       	breq	.+16     	; 0xa8c <GPIO_u8GetPortValue+0x14>
 a7c:	28 f0       	brcs	.+10     	; 0xa88 <GPIO_u8GetPortValue+0x10>
 a7e:	82 30       	cpi	r24, 0x02	; 2
 a80:	39 f0       	breq	.+14     	; 0xa90 <GPIO_u8GetPortValue+0x18>
 a82:	83 30       	cpi	r24, 0x03	; 3
 a84:	39 f0       	breq	.+14     	; 0xa94 <GPIO_u8GetPortValue+0x1c>
 a86:	08 c0       	rjmp	.+16     	; 0xa98 <GPIO_u8GetPortValue+0x20>
		case PORT_A :
			local_u8retval = PINA_R ;
 a88:	89 b3       	in	r24, 0x19	; 25
			break;
 a8a:	08 95       	ret
		
		case PORT_B :
			local_u8retval = PINB_R ;
 a8c:	86 b3       	in	r24, 0x16	; 22
			break;
 a8e:	08 95       	ret
			
		case PORT_C :
			local_u8retval = PINC_R ;
 a90:	83 b3       	in	r24, 0x13	; 19
			break;
 a92:	08 95       	ret
			
		case PORT_D :
			local_u8retval = PIND_R ;
 a94:	80 b3       	in	r24, 0x10	; 16
			break;
 a96:	08 95       	ret
	return local_u8retval ;
}

u8 GPIO_u8GetPortValue(u8 cpy_PORT)
{
	u8 local_u8retval = 0 ;
 a98:	80 e0       	ldi	r24, 0x00	; 0
			
		default: break;
	}
	
	return local_u8retval ;
 a9a:	08 95       	ret

Disassembly of section .text.heating_Init:

00000c0a <heating_Init>:

#include "heating_element.h"

void heating_Init(void)
{
	GPIO_voidSetPortPinDirection(HEATING_PORT , HEATING_PIN , HEATING_DIR) ;
 c0a:	41 e0       	ldi	r20, 0x01	; 1
 c0c:	66 e0       	ldi	r22, 0x06	; 6
 c0e:	82 e0       	ldi	r24, 0x02	; 2
 c10:	0e 94 63 00 	call	0xc6	; 0xc6 <_etext>
 c14:	08 95       	ret

Disassembly of section .text.heating_set_state:

00000afe <heating_set_state>:
}

void heating_set_state(u8 state)
{
	switch (state)
 afe:	88 23       	and	r24, r24
 b00:	41 f0       	breq	.+16     	; 0xb12 <heating_set_state+0x14>
 b02:	81 30       	cpi	r24, 0x01	; 1
 b04:	59 f4       	brne	.+22     	; 0xb1c <heating_set_state+0x1e>
	{
		case heat_ON :
		GPIO_voidSetPortPinValue(HEATING_PORT , HEATING_PIN , 1) ;
 b06:	41 e0       	ldi	r20, 0x01	; 1
 b08:	66 e0       	ldi	r22, 0x06	; 6
 b0a:	82 e0       	ldi	r24, 0x02	; 2
 b0c:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <GPIO_voidSetPortPinValue>
		break;
 b10:	08 95       	ret
		
		case heat_OFF :
		GPIO_voidSetPortPinValue(HEATING_PORT , HEATING_PIN , 0) ;
 b12:	40 e0       	ldi	r20, 0x00	; 0
 b14:	66 e0       	ldi	r22, 0x06	; 6
 b16:	82 e0       	ldi	r24, 0x02	; 2
 b18:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <GPIO_voidSetPortPinValue>
 b1c:	08 95       	ret

Disassembly of section .text.I2C_Init:

00000bbe <I2C_Init>:

void I2C_Init(void)
{
  // TWI initialization
  // Bit Rate: 400.000 kHz
  TWBR = 72;
 bbe:	88 e4       	ldi	r24, 0x48	; 72
 bc0:	80 b9       	out	0x00, r24	; 0
  // Generate Acknowledge Pulse: On
  // TWI Interrupt: Off
  TWCR = 0x44;
 bc2:	84 e4       	ldi	r24, 0x44	; 68
 bc4:	86 bf       	out	0x36, r24	; 54
  TWSR = 0x00;
 bc6:	11 b8       	out	0x01, r1	; 1
  TWSR &= (~((1 << TWPS1) | (1 << TWPS0)));
 bc8:	81 b1       	in	r24, 0x01	; 1
 bca:	8c 7f       	andi	r24, 0xFC	; 252
 bcc:	81 b9       	out	0x01, r24	; 1
 bce:	08 95       	ret

Disassembly of section .text.TWIStart:

00000c16 <TWIStart>:

void TWIStart(void)
{

  // Send Start Condition
  TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
 c16:	84 ea       	ldi	r24, 0xA4	; 164
 c18:	86 bf       	out	0x36, r24	; 54

  // Wait for TWINT flag set in TWCR Register
  while (!(TWCR & (1 << TWINT)))
 c1a:	06 b6       	in	r0, 0x36	; 54
 c1c:	07 fe       	sbrs	r0, 7
 c1e:	fd cf       	rjmp	.-6      	; 0xc1a <TWIStart+0x4>
    ;
}
 c20:	08 95       	ret

Disassembly of section .text.TWIStop:

00000c64 <TWIStop>:

void TWIStop(void)
{
  // Send Stop Condition
  TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWSTO);
 c64:	84 e9       	ldi	r24, 0x94	; 148
 c66:	86 bf       	out	0x36, r24	; 54
 c68:	08 95       	ret

Disassembly of section .text.TWIWrite:

00000bf0 <TWIWrite>:
}

void TWIWrite(u8 data)
{
  // Put data On TWI Register
  TWDR = data;
 bf0:	83 b9       	out	0x03, r24	; 3
  // Send Data
  TWCR = (1 << TWINT) | (1 << TWEN);
 bf2:	84 e8       	ldi	r24, 0x84	; 132
 bf4:	86 bf       	out	0x36, r24	; 54
  // Wait for TWINT flag set in TWCR Register
  while (!(TWCR & (1 << TWINT)))
 bf6:	06 b6       	in	r0, 0x36	; 54
 bf8:	07 fe       	sbrs	r0, 7
 bfa:	fd cf       	rjmp	.-6      	; 0xbf6 <TWIWrite+0x6>
    ;
}
 bfc:	08 95       	ret

Disassembly of section .text.LED_ON:

00000c22 <LED_ON>:
	LED_OFF() ;
}

void LED_ON(void)
{
	GPIO_voidSetPortPinValue(LED_PORT , LED_PIN , 1) ;
 c22:	41 e0       	ldi	r20, 0x01	; 1
 c24:	65 e0       	ldi	r22, 0x05	; 5
 c26:	82 e0       	ldi	r24, 0x02	; 2
 c28:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <GPIO_voidSetPortPinValue>
 c2c:	08 95       	ret

Disassembly of section .text.LED_OFF:

00000c2e <LED_OFF>:
}

void LED_OFF(void)
{
	GPIO_voidSetPortPinValue(LED_PORT , LED_PIN , 0) ;
 c2e:	40 e0       	ldi	r20, 0x00	; 0
 c30:	65 e0       	ldi	r22, 0x05	; 5
 c32:	82 e0       	ldi	r24, 0x02	; 2
 c34:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <GPIO_voidSetPortPinValue>
 c38:	08 95       	ret

Disassembly of section .text.LED_Init:

00000be0 <LED_Init>:
#include "LED.h"


void LED_Init(void)
{
	GPIO_voidSetPortPinDirection(LED_PORT , LED_PIN , LED_DIRECTION) ;
 be0:	41 e0       	ldi	r20, 0x01	; 1
 be2:	65 e0       	ldi	r22, 0x05	; 5
 be4:	82 e0       	ldi	r24, 0x02	; 2
 be6:	0e 94 63 00 	call	0xc6	; 0xc6 <_etext>
	
	//Turn OFF the led as the initial state
	LED_OFF() ;
 bea:	0e 94 17 06 	call	0xc2e	; 0xc2e <LED_OFF>
 bee:	08 95       	ret

Disassembly of section .text.LED_Blink:

00000c46 <LED_Blink>:
	GPIO_voidSetPortPinValue(LED_PORT , LED_PIN , 0) ;
}

void LED_Blink(void)
{
	GPIO_voidTogglePortPinValue(LED_PORT , LED_PIN) ;
 c46:	65 e0       	ldi	r22, 0x05	; 5
 c48:	82 e0       	ldi	r24, 0x02	; 2
 c4a:	0e 94 22 03 	call	0x644	; 0x644 <GPIO_voidTogglePortPinValue>
 c4e:	08 95       	ret

Disassembly of section .text.LM35_Init:

00000b7a <LM35_Init>:

extern u8 sensed_temp ;

void LM35_Init(void)
{
	GPIO_voidSetPortPinDirection(LM35_PORT , LM35_PIN , LM35_DIR) ;
 b7a:	40 e0       	ldi	r20, 0x00	; 0
 b7c:	61 e0       	ldi	r22, 0x01	; 1
 b7e:	80 e0       	ldi	r24, 0x00	; 0
 b80:	0e 94 63 00 	call	0xc6	; 0xc6 <_etext>
	ADC_voidInit() ;
 b84:	0e 94 fc 04 	call	0x9f8	; 0x9f8 <ADC_voidInit>
	ADC_u16SelectChannel(LM35_ADC_CH) ;
 b88:	81 e0       	ldi	r24, 0x01	; 1
 b8a:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <ADC_u16SelectChannel>
	ADC_StartConversion() ;
 b8e:	0e 94 28 06 	call	0xc50	; 0xc50 <ADC_StartConversion>
 b92:	08 95       	ret

Disassembly of section .text.LM35_Temp_Avg:

000009c0 <LM35_Temp_Avg>:


u8 LM35_Temp_Avg(void){
	
    u8 INDEX = 0 ; 
    u16 sum = 0 ;
 9c0:	20 e0       	ldi	r18, 0x00	; 0
 9c2:	30 e0       	ldi	r19, 0x00	; 0
	u16 avg = 0 ;
	
    for (INDEX=0 ; INDEX<TEMPERATURE_N_READING ; INDEX++){
 9c4:	80 e0       	ldi	r24, 0x00	; 0
 9c6:	0b c0       	rjmp	.+22     	; 0x9de <LM35_Temp_Avg+0x1e>
        sum = sum + Temp_Reading_array[INDEX] ;
 9c8:	e8 2f       	mov	r30, r24
 9ca:	f0 e0       	ldi	r31, 0x00	; 0
 9cc:	ee 0f       	add	r30, r30
 9ce:	ff 1f       	adc	r31, r31
 9d0:	ee 56       	subi	r30, 0x6E	; 110
 9d2:	ff 4f       	sbci	r31, 0xFF	; 255
 9d4:	40 81       	ld	r20, Z
 9d6:	51 81       	ldd	r21, Z+1	; 0x01
 9d8:	24 0f       	add	r18, r20
 9da:	35 1f       	adc	r19, r21
	
    u8 INDEX = 0 ; 
    u16 sum = 0 ;
	u16 avg = 0 ;
	
    for (INDEX=0 ; INDEX<TEMPERATURE_N_READING ; INDEX++){
 9dc:	8f 5f       	subi	r24, 0xFF	; 255
 9de:	8a 30       	cpi	r24, 0x0A	; 10
 9e0:	98 f3       	brcs	.-26     	; 0x9c8 <LM35_Temp_Avg+0x8>
        sum = sum + Temp_Reading_array[INDEX] ;
    }
	
    avg = (sum / TEMPERATURE_N_READING) ;
 9e2:	ad ec       	ldi	r26, 0xCD	; 205
 9e4:	bc ec       	ldi	r27, 0xCC	; 204
 9e6:	0e 94 ae 05 	call	0xb5c	; 0xb5c <__umulhisi3>
 9ea:	96 95       	lsr	r25
 9ec:	87 95       	ror	r24
 9ee:	96 95       	lsr	r25
 9f0:	87 95       	ror	r24
 9f2:	96 95       	lsr	r25
 9f4:	87 95       	ror	r24
	
	return avg ;
}
 9f6:	08 95       	ret

Disassembly of section .text.LM35_Read_Temp:

000008ea <LM35_Read_Temp>:

void LM35_Read_Temp(void)
{	
 8ea:	cf 93       	push	r28
 8ec:	df 93       	push	r29
	ADC_StartConversion() ;
 8ee:	0e 94 28 06 	call	0xc50	; 0xc50 <ADC_StartConversion>
	
	if ( current_mode == NORMAL_MODE )
 8f2:	80 91 b5 00 	lds	r24, 0x00B5	; 0x8000b5 <current_mode>
 8f6:	81 30       	cpi	r24, 0x01	; 1
 8f8:	d9 f4       	brne	.+54     	; 0x930 <LM35_Read_Temp+0x46>
	{
		Temp_Reading_array[i] = (ADC_u16GetData() / 2) - 2 ;
 8fa:	c0 91 b4 00 	lds	r28, 0x00B4	; 0x8000b4 <i>
 8fe:	d0 e0       	ldi	r29, 0x00	; 0
 900:	0e 94 2c 06 	call	0xc58	; 0xc58 <ADC_u16GetData>
 904:	96 95       	lsr	r25
 906:	87 95       	ror	r24
 908:	02 97       	sbiw	r24, 0x02	; 2
 90a:	cc 0f       	add	r28, r28
 90c:	dd 1f       	adc	r29, r29
 90e:	ce 56       	subi	r28, 0x6E	; 110
 910:	df 4f       	sbci	r29, 0xFF	; 255
 912:	99 83       	std	Y+1, r25	; 0x01
 914:	88 83       	st	Y, r24
		
		i++ ;
 916:	80 91 b4 00 	lds	r24, 0x00B4	; 0x8000b4 <i>
 91a:	8f 5f       	subi	r24, 0xFF	; 255
 91c:	80 93 b4 00 	sts	0x00B4, r24	; 0x8000b4 <i>
		
		if ( i == TEMPERATURE_N_READING)
 920:	8a 30       	cpi	r24, 0x0A	; 10
 922:	31 f4       	brne	.+12     	; 0x930 <LM35_Read_Temp+0x46>
		{
			i = 0 ;
 924:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <i>
			sensed_temp = LM35_Temp_Avg() ;
 928:	0e 94 e0 04 	call	0x9c0	; 0x9c0 <LM35_Temp_Avg>
 92c:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <sensed_temp>
		}
	}
}
 930:	df 91       	pop	r29
 932:	cf 91       	pop	r28
 934:	08 95       	ret

Disassembly of section .text.Save_Last_Temp:

00000c3a <Save_Last_Temp>:

void Save_Last_Temp(void)
{
	EEPROM_Write(sensed_temp , ADDRESS) ;
 c3a:	60 e0       	ldi	r22, 0x00	; 0
 c3c:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <sensed_temp>
 c40:	0e 94 15 05 	call	0xa2a	; 0xa2a <EEPROM_Write>
 c44:	08 95       	ret

Disassembly of section .text.main:

00000562 <main>:



int main(void)
{
	current_state = HEATER_OFF ;
 562:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <_edata>

	LED_Init() ;
 566:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <LED_Init>
	SW_Init() ;
 56a:	0e 94 be 04 	call	0x97c	; 0x97c <SW_Init>
	SSD_Init() ;
 56e:	0e 94 4e 05 	call	0xa9c	; 0xa9c <SSD_Init>
	LM35_Init() ;
 572:	0e 94 bd 05 	call	0xb7a	; 0xb7a <LM35_Init>
	EEPROM_Init() ;
 576:	0e 94 2f 06 	call	0xc5e	; 0xc5e <EEPROM_Init>
	cooling_Init() ;
 57a:	0e 94 ff 05 	call	0xbfe	; 0xbfe <cooling_Init>
	heating_Init() ;
 57e:	0e 94 05 06 	call	0xc0a	; 0xc0a <heating_Init>
	
	
	
	EXT_voidEnableExtInt(EXT_INT_2 , FALLIN_EDGE) ;
 582:	62 e0       	ldi	r22, 0x02	; 2
 584:	82 e0       	ldi	r24, 0x02	; 2
 586:	0e 94 b9 01 	call	0x372	; 0x372 <EXT_voidEnableExtInt>
	
	SCH_Init_T1() ;
 58a:	0e 94 9b 04 	call	0x936	; 0x936 <SCH_Init_T1>
	
	SCH_Add_Task(SW_ST , 0 , SW_PERIOD) ;
 58e:	44 e6       	ldi	r20, 0x64	; 100
 590:	60 e0       	ldi	r22, 0x00	; 0
 592:	8d e4       	ldi	r24, 0x4D	; 77
 594:	91 e0       	ldi	r25, 0x01	; 1
 596:	0e 94 56 03 	call	0x6ac	; 0x6ac <SCH_Add_Task>
	SCH_Add_Task(LM35_Read_Temp , 0 , TEMPERATURE_period) ;
 59a:	44 e6       	ldi	r20, 0x64	; 100
 59c:	60 e0       	ldi	r22, 0x00	; 0
 59e:	85 e7       	ldi	r24, 0x75	; 117
 5a0:	94 e0       	ldi	r25, 0x04	; 4
 5a2:	0e 94 56 03 	call	0x6ac	; 0x6ac <SCH_Add_Task>
	SCH_Add_Task(Heat_Cool_Elements , 0 , SYSTEM_PERIOD) ;
 5a6:	44 e1       	ldi	r20, 0x14	; 20
 5a8:	60 e0       	ldi	r22, 0x00	; 0
 5aa:	8a ee       	ldi	r24, 0xEA	; 234
 5ac:	92 e0       	ldi	r25, 0x02	; 2
 5ae:	0e 94 56 03 	call	0x6ac	; 0x6ac <SCH_Add_Task>
	SCH_Add_Task(SSD_UPDATE , 0 , SYSTEM_PERIOD) ;
 5b2:	44 e1       	ldi	r20, 0x14	; 20
 5b4:	60 e0       	ldi	r22, 0x00	; 0
 5b6:	8f e8       	ldi	r24, 0x8F	; 143
 5b8:	95 e0       	ldi	r25, 0x05	; 5
 5ba:	0e 94 56 03 	call	0x6ac	; 0x6ac <SCH_Add_Task>
	SCH_Add_Task(SSD_BLINK , 0 , SSD_BLINK_PERIOD) ;
 5be:	44 e6       	ldi	r20, 0x64	; 100
 5c0:	60 e0       	ldi	r22, 0x00	; 0
 5c2:	89 e2       	ldi	r24, 0x29	; 41
 5c4:	95 e0       	ldi	r25, 0x05	; 5
 5c6:	0e 94 56 03 	call	0x6ac	; 0x6ac <SCH_Add_Task>
	
	Save_Last_Temp() ;
 5ca:	0e 94 1d 06 	call	0xc3a	; 0xc3a <Save_Last_Temp>

	while(1)
    {
		SCH_Dispatch_Tasks() ;
 5ce:	0e 94 ed 03 	call	0x7da	; 0x7da <SCH_Dispatch_Tasks>
 5d2:	fd cf       	rjmp	.-6      	; 0x5ce <main+0x6c>

Disassembly of section .text.__vector_3:

00000714 <__vector_3>:
    }
}

ISR(INT2_vect)
{
 714:	1f 92       	push	r1
 716:	0f 92       	push	r0
 718:	0f b6       	in	r0, 0x3f	; 63
 71a:	0f 92       	push	r0
 71c:	11 24       	eor	r1, r1
 71e:	2f 93       	push	r18
 720:	3f 93       	push	r19
 722:	4f 93       	push	r20
 724:	5f 93       	push	r21
 726:	6f 93       	push	r22
 728:	7f 93       	push	r23
 72a:	8f 93       	push	r24
 72c:	9f 93       	push	r25
 72e:	af 93       	push	r26
 730:	bf 93       	push	r27
 732:	ef 93       	push	r30
 734:	ff 93       	push	r31
	switch( current_state )
 736:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
 73a:	88 23       	and	r24, r24
 73c:	19 f0       	breq	.+6      	; 0x744 <__vector_3+0x30>
 73e:	81 30       	cpi	r24, 0x01	; 1
 740:	39 f0       	breq	.+14     	; 0x750 <__vector_3+0x3c>
 742:	0a c0       	rjmp	.+20     	; 0x758 <__vector_3+0x44>
	{
		case HEATER_OFF :
			current_state = HEATER_ON ;
 744:	81 e0       	ldi	r24, 0x01	; 1
 746:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <_edata>
			SCH_Start() ;
 74a:	0e 94 3a 06 	call	0xc74	; 0xc74 <SCH_Start>
			break;
 74e:	04 c0       	rjmp	.+8      	; 0x758 <__vector_3+0x44>
		
		case HEATER_ON :
			current_state = HEATER_OFF ;
 750:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <_edata>
			OFF_STATE() ;
 754:	0e 94 ca 05 	call	0xb94	; 0xb94 <OFF_STATE>
	}
}
 758:	ff 91       	pop	r31
 75a:	ef 91       	pop	r30
 75c:	bf 91       	pop	r27
 75e:	af 91       	pop	r26
 760:	9f 91       	pop	r25
 762:	8f 91       	pop	r24
 764:	7f 91       	pop	r23
 766:	6f 91       	pop	r22
 768:	5f 91       	pop	r21
 76a:	4f 91       	pop	r20
 76c:	3f 91       	pop	r19
 76e:	2f 91       	pop	r18
 770:	0f 90       	pop	r0
 772:	0f be       	out	0x3f, r0	; 63
 774:	0f 90       	pop	r0
 776:	1f 90       	pop	r1
 778:	18 95       	reti

Disassembly of section .text.SCH_Add_Task:

000006ac <SCH_Add_Task>:
		
	for (INDEX=0 ; INDEX<SCH_MAX_TASKS ; INDEX++)
	{
		SCH_tasks_G[INDEX].delay = SCH_tasks_G[INDEX].delay ;
	}
}
 6ac:	20 e0       	ldi	r18, 0x00	; 0
 6ae:	30 e0       	ldi	r19, 0x00	; 0
 6b0:	02 c0       	rjmp	.+4      	; 0x6b6 <SCH_Add_Task+0xa>
 6b2:	2f 5f       	subi	r18, 0xFF	; 255
 6b4:	3f 4f       	sbci	r19, 0xFF	; 255
 6b6:	f9 01       	movw	r30, r18
 6b8:	ee 0f       	add	r30, r30
 6ba:	ff 1f       	adc	r31, r31
 6bc:	e2 0f       	add	r30, r18
 6be:	f3 1f       	adc	r31, r19
 6c0:	ee 0f       	add	r30, r30
 6c2:	ff 1f       	adc	r31, r31
 6c4:	ee 59       	subi	r30, 0x9E	; 158
 6c6:	ff 4f       	sbci	r31, 0xFF	; 255
 6c8:	01 90       	ld	r0, Z+
 6ca:	f0 81       	ld	r31, Z
 6cc:	e0 2d       	mov	r30, r0
 6ce:	ef 2b       	or	r30, r31
 6d0:	19 f0       	breq	.+6      	; 0x6d8 <SCH_Add_Task+0x2c>
 6d2:	28 30       	cpi	r18, 0x08	; 8
 6d4:	31 05       	cpc	r19, r1
 6d6:	68 f3       	brcs	.-38     	; 0x6b2 <SCH_Add_Task+0x6>
 6d8:	28 30       	cpi	r18, 0x08	; 8
 6da:	31 05       	cpc	r19, r1
 6dc:	49 f4       	brne	.+18     	; 0x6f0 <SCH_Add_Task+0x44>
 6de:	81 e0       	ldi	r24, 0x01	; 1
 6e0:	90 e0       	ldi	r25, 0x00	; 0
 6e2:	90 93 b1 00 	sts	0x00B1, r25	; 0x8000b1 <Error_Code_G+0x1>
 6e6:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <Error_Code_G>
 6ea:	88 e0       	ldi	r24, 0x08	; 8
 6ec:	90 e0       	ldi	r25, 0x00	; 0
 6ee:	08 95       	ret
 6f0:	f9 01       	movw	r30, r18
 6f2:	ee 0f       	add	r30, r30
 6f4:	ff 1f       	adc	r31, r31
 6f6:	e2 0f       	add	r30, r18
 6f8:	f3 1f       	adc	r31, r19
 6fa:	ee 0f       	add	r30, r30
 6fc:	ff 1f       	adc	r31, r31
 6fe:	ee 59       	subi	r30, 0x9E	; 158
 700:	ff 4f       	sbci	r31, 0xFF	; 255
 702:	91 83       	std	Z+1, r25	; 0x01
 704:	80 83       	st	Z, r24
 706:	62 83       	std	Z+2, r22	; 0x02
 708:	43 83       	std	Z+3, r20	; 0x03
 70a:	15 82       	std	Z+5, r1	; 0x05
 70c:	14 82       	std	Z+4, r1	; 0x04
 70e:	82 2f       	mov	r24, r18
 710:	93 2f       	mov	r25, r19
 712:	08 95       	ret

Disassembly of section .text.SCH_Start:

00000c74 <SCH_Start>:
	SCH_Go_To_Sleep() ;
}

void SCH_Start(void)
{
	sei() ;
 c74:	78 94       	sei
 c76:	08 95       	ret

Disassembly of section .text.SCH_Delete_Task:

0000077a <SCH_Delete_Task>:
}



u16 SCH_Delete_Task(const u16 Task_Index)
{
 77a:	9c 01       	movw	r18, r24
	u16 Return_Code ;
	
	if ( SCH_tasks_G[Task_Index].ptask == 0 )
 77c:	fc 01       	movw	r30, r24
 77e:	ee 0f       	add	r30, r30
 780:	ff 1f       	adc	r31, r31
 782:	e8 0f       	add	r30, r24
 784:	f9 1f       	adc	r31, r25
 786:	ee 0f       	add	r30, r30
 788:	ff 1f       	adc	r31, r31
 78a:	ee 59       	subi	r30, 0x9E	; 158
 78c:	ff 4f       	sbci	r31, 0xFF	; 255
 78e:	80 81       	ld	r24, Z
 790:	91 81       	ldd	r25, Z+1	; 0x01
 792:	89 2b       	or	r24, r25
 794:	49 f4       	brne	.+18     	; 0x7a8 <SCH_Delete_Task+0x2e>
	{
		//No task at this location...
		//
		//set the global error variable
		Error_Code_G = ERROR_SCH_CANNOT_DELETE_TASK ;
 796:	82 e0       	ldi	r24, 0x02	; 2
 798:	90 e0       	ldi	r25, 0x00	; 0
 79a:	90 93 b1 00 	sts	0x00B1, r25	; 0x8000b1 <Error_Code_G+0x1>
 79e:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <Error_Code_G>
		//...also return an error code
		Return_Code = RETURN_ERROR ;
 7a2:	81 e0       	ldi	r24, 0x01	; 1
 7a4:	90 e0       	ldi	r25, 0x00	; 0
 7a6:	02 c0       	rjmp	.+4      	; 0x7ac <SCH_Delete_Task+0x32>
	}
	else
	{
		Return_Code = RETURN_NORMAL ;
 7a8:	80 e0       	ldi	r24, 0x00	; 0
 7aa:	90 e0       	ldi	r25, 0x00	; 0
	}
	
	SCH_tasks_G[Task_Index].ptask = 0x0000 ;
 7ac:	f9 01       	movw	r30, r18
 7ae:	ee 0f       	add	r30, r30
 7b0:	ff 1f       	adc	r31, r31
 7b2:	df 01       	movw	r26, r30
 7b4:	a2 0f       	add	r26, r18
 7b6:	b3 1f       	adc	r27, r19
 7b8:	aa 0f       	add	r26, r26
 7ba:	bb 1f       	adc	r27, r27
 7bc:	ae 59       	subi	r26, 0x9E	; 158
 7be:	bf 4f       	sbci	r27, 0xFF	; 255
 7c0:	11 96       	adiw	r26, 0x01	; 1
 7c2:	1c 92       	st	X, r1
 7c4:	1e 92       	st	-X, r1
	SCH_tasks_G[Task_Index].delay = 0 ;
 7c6:	12 96       	adiw	r26, 0x02	; 2
 7c8:	1c 92       	st	X, r1
 7ca:	12 97       	sbiw	r26, 0x02	; 2
	SCH_tasks_G[Task_Index].priod = 0 ;
 7cc:	13 96       	adiw	r26, 0x03	; 3
 7ce:	1c 92       	st	X, r1
 7d0:	13 97       	sbiw	r26, 0x03	; 3
	
	SCH_tasks_G[Task_Index].RunMe = 0 ;
 7d2:	fd 01       	movw	r30, r26
 7d4:	15 82       	std	Z+5, r1	; 0x05
 7d6:	14 82       	std	Z+4, r1	; 0x04
	
	return Return_Code ;		//return status
}
 7d8:	08 95       	ret

Disassembly of section .text.SCH_Init_T1:

00000936 <SCH_Init_T1>:
//Used to display the error code
u16 Error_Code_G = 0 ;


void SCH_Init_T1 (void) 
{
 936:	cf 93       	push	r28
 938:	df 93       	push	r29
	u16 i ;
	
	for ( i=0 ; i< SCH_MAX_TASKS ; i++ )
 93a:	c0 e0       	ldi	r28, 0x00	; 0
 93c:	d0 e0       	ldi	r29, 0x00	; 0
 93e:	04 c0       	rjmp	.+8      	; 0x948 <SCH_Init_T1+0x12>
	{
		SCH_Delete_Task(i) ;
 940:	ce 01       	movw	r24, r28
 942:	0e 94 bd 03 	call	0x77a	; 0x77a <SCH_Delete_Task>

void SCH_Init_T1 (void) 
{
	u16 i ;
	
	for ( i=0 ; i< SCH_MAX_TASKS ; i++ )
 946:	21 96       	adiw	r28, 0x01	; 1
 948:	c8 30       	cpi	r28, 0x08	; 8
 94a:	d1 05       	cpc	r29, r1
 94c:	c8 f3       	brcs	.-14     	; 0x940 <SCH_Init_T1+0xa>
	}
	
	// Reset the global error variable
	// - SCH_Delete_Task() will generate an error code,
	// (because the task array is empty)
	Error_Code_G = 0 ;
 94e:	10 92 b1 00 	sts	0x00B1, r1	; 0x8000b1 <Error_Code_G+0x1>
 952:	10 92 b0 00 	sts	0x00B0, r1	; 0x8000b0 <Error_Code_G>
	
	//Enable interrupt for timer over flow.
	//TIMSK_  |= 0x10 ;
	SET_BIT(TIMSK_ , TIMSK_OCIE1A) ;
 956:	89 b7       	in	r24, 0x39	; 57
 958:	80 61       	ori	r24, 0x10	; 16
 95a:	89 bf       	out	0x39, r24	; 57
	//Enable the global interrupt.	
	SREG   |= 0x80 ;		
 95c:	8f b7       	in	r24, 0x3f	; 63
 95e:	80 68       	ori	r24, 0x80	; 128
 960:	8f bf       	out	0x3f, r24	; 63
	//Timer1_Manual_Reload 
	//OC1A state at compare match & mode of the timer.
	TCCR_1A |= 0x00 ;		
 962:	8f b5       	in	r24, 0x2f	; 47
 964:	8f bd       	out	0x2f, r24	; 47
	TCNT_1 = 0 ;
 966:	1d bc       	out	0x2d, r1	; 45
 968:	1c bc       	out	0x2c, r1	; 44
	OCR_1A = 16 ;
 96a:	80 e1       	ldi	r24, 0x10	; 16
 96c:	90 e0       	ldi	r25, 0x00	; 0
 96e:	9b bd       	out	0x2b, r25	; 43
 970:	8a bd       	out	0x2a, r24	; 42
	TCCR_1B = 13 ;	
 972:	8d e0       	ldi	r24, 0x0D	; 13
 974:	8e bd       	out	0x2e, r24	; 46
}
 976:	df 91       	pop	r29
 978:	cf 91       	pop	r28
 97a:	08 95       	ret

Disassembly of section .text.SCH_Go_To_Sleep:

00000baa <SCH_Go_To_Sleep>:
}

void SCH_Go_To_Sleep(void)
{
	// Enter idle mode 
	CLEAR_BIT(MCUCR , SM2) ;
 baa:	85 b7       	in	r24, 0x35	; 53
 bac:	8f 7b       	andi	r24, 0xBF	; 191
 bae:	85 bf       	out	0x35, r24	; 53
	CLEAR_BIT(MCUCR , SM1) ;
 bb0:	85 b7       	in	r24, 0x35	; 53
 bb2:	8f 7d       	andi	r24, 0xDF	; 223
 bb4:	85 bf       	out	0x35, r24	; 53
	CLEAR_BIT(MCUCR , SM0) ;
 bb6:	85 b7       	in	r24, 0x35	; 53
 bb8:	8f 7e       	andi	r24, 0xEF	; 239
 bba:	85 bf       	out	0x35, r24	; 53
 bbc:	08 95       	ret

Disassembly of section .text.SCH_Dispatch_Tasks:

000007da <SCH_Dispatch_Tasks>:
	// return position of task (to allow later deletion)
	return Index ;	
}

void SCH_Dispatch_Tasks( void )
{
 7da:	0f 93       	push	r16
 7dc:	1f 93       	push	r17
 7de:	cf 93       	push	r28
 7e0:	df 93       	push	r29
	u16 Index ;
	
	//Dispatches (runs) the next task (if one is readt)
	for ( Index=0 ; Index<SCH_MAX_TASKS ; Index++ )
 7e2:	c0 e0       	ldi	r28, 0x00	; 0
 7e4:	d0 e0       	ldi	r29, 0x00	; 0
 7e6:	1f c0       	rjmp	.+62     	; 0x826 <__DATA_REGION_LENGTH__+0x26>
	{
		if ( SCH_tasks_G[Index].RunMe > 0 )
 7e8:	fe 01       	movw	r30, r28
 7ea:	ee 0f       	add	r30, r30
 7ec:	ff 1f       	adc	r31, r31
 7ee:	ec 0f       	add	r30, r28
 7f0:	fd 1f       	adc	r31, r29
 7f2:	ee 0f       	add	r30, r30
 7f4:	ff 1f       	adc	r31, r31
 7f6:	ee 59       	subi	r30, 0x9E	; 158
 7f8:	ff 4f       	sbci	r31, 0xFF	; 255
 7fa:	84 81       	ldd	r24, Z+4	; 0x04
 7fc:	95 81       	ldd	r25, Z+5	; 0x05
 7fe:	89 2b       	or	r24, r25
 800:	89 f0       	breq	.+34     	; 0x824 <__DATA_REGION_LENGTH__+0x24>
		{
			(*SCH_tasks_G[Index].ptask)() ;		// Run the task
 802:	8f 01       	movw	r16, r30
 804:	01 90       	ld	r0, Z+
 806:	f0 81       	ld	r31, Z
 808:	e0 2d       	mov	r30, r0
 80a:	09 95       	icall
			
			SCH_tasks_G[Index].RunMe -= 1 ;		// Reset / reduce RunMe flag
 80c:	f8 01       	movw	r30, r16
 80e:	84 81       	ldd	r24, Z+4	; 0x04
 810:	95 81       	ldd	r25, Z+5	; 0x05
 812:	01 97       	sbiw	r24, 0x01	; 1
 814:	95 83       	std	Z+5, r25	; 0x05
 816:	84 83       	std	Z+4, r24	; 0x04
			
			//Periodic tasks will automatically run again
			//- if this is a 'one shot' task, remove it from the array 
			if ( SCH_tasks_G[Index].priod == 0 )
 818:	83 81       	ldd	r24, Z+3	; 0x03
 81a:	81 11       	cpse	r24, r1
 81c:	03 c0       	rjmp	.+6      	; 0x824 <__DATA_REGION_LENGTH__+0x24>
			{
				SCH_Delete_Task(Index) ;
 81e:	ce 01       	movw	r24, r28
 820:	0e 94 bd 03 	call	0x77a	; 0x77a <SCH_Delete_Task>
void SCH_Dispatch_Tasks( void )
{
	u16 Index ;
	
	//Dispatches (runs) the next task (if one is readt)
	for ( Index=0 ; Index<SCH_MAX_TASKS ; Index++ )
 824:	21 96       	adiw	r28, 0x01	; 1
 826:	c8 30       	cpi	r28, 0x08	; 8
 828:	d1 05       	cpc	r29, r1
 82a:	f0 f2       	brcs	.-68     	; 0x7e8 <SCH_Dispatch_Tasks+0xe>
	
	//Report system status
	SCH_Report_Status() ;
	
	//The scheduler enters idle mode at this point
	SCH_Go_To_Sleep() ;
 82c:	0e 94 d5 05 	call	0xbaa	; 0xbaa <SCH_Go_To_Sleep>
}
 830:	df 91       	pop	r29
 832:	cf 91       	pop	r28
 834:	1f 91       	pop	r17
 836:	0f 91       	pop	r16
 838:	08 95       	ret

Disassembly of section .text.SCH_Update:

00000444 <SCH_Update>:
		
	for (INDEX=0 ; INDEX<SCH_MAX_TASKS ; INDEX++)
	{
		SCH_tasks_G[INDEX].delay = SCH_tasks_G[INDEX].delay ;
	}
}
 444:	80 e0       	ldi	r24, 0x00	; 0
 446:	90 e0       	ldi	r25, 0x00	; 0
 448:	42 c0       	rjmp	.+132    	; 0x4ce <SCH_Update+0x8a>
 44a:	fc 01       	movw	r30, r24
 44c:	ee 0f       	add	r30, r30
 44e:	ff 1f       	adc	r31, r31
 450:	e8 0f       	add	r30, r24
 452:	f9 1f       	adc	r31, r25
 454:	ee 0f       	add	r30, r30
 456:	ff 1f       	adc	r31, r31
 458:	ee 59       	subi	r30, 0x9E	; 158
 45a:	ff 4f       	sbci	r31, 0xFF	; 255
 45c:	20 81       	ld	r18, Z
 45e:	31 81       	ldd	r19, Z+1	; 0x01
 460:	23 2b       	or	r18, r19
 462:	a1 f1       	breq	.+104    	; 0x4cc <SCH_Update+0x88>
 464:	fc 01       	movw	r30, r24
 466:	ee 0f       	add	r30, r30
 468:	ff 1f       	adc	r31, r31
 46a:	e8 0f       	add	r30, r24
 46c:	f9 1f       	adc	r31, r25
 46e:	ee 0f       	add	r30, r30
 470:	ff 1f       	adc	r31, r31
 472:	ee 59       	subi	r30, 0x9E	; 158
 474:	ff 4f       	sbci	r31, 0xFF	; 255
 476:	22 81       	ldd	r18, Z+2	; 0x02
 478:	21 11       	cpse	r18, r1
 47a:	1d c0       	rjmp	.+58     	; 0x4b6 <SCH_Update+0x72>
 47c:	fc 01       	movw	r30, r24
 47e:	ee 0f       	add	r30, r30
 480:	ff 1f       	adc	r31, r31
 482:	e8 0f       	add	r30, r24
 484:	f9 1f       	adc	r31, r25
 486:	ee 0f       	add	r30, r30
 488:	ff 1f       	adc	r31, r31
 48a:	ee 59       	subi	r30, 0x9E	; 158
 48c:	ff 4f       	sbci	r31, 0xFF	; 255
 48e:	24 81       	ldd	r18, Z+4	; 0x04
 490:	35 81       	ldd	r19, Z+5	; 0x05
 492:	2f 5f       	subi	r18, 0xFF	; 255
 494:	3f 4f       	sbci	r19, 0xFF	; 255
 496:	35 83       	std	Z+5, r19	; 0x05
 498:	24 83       	std	Z+4, r18	; 0x04
 49a:	23 81       	ldd	r18, Z+3	; 0x03
 49c:	22 23       	and	r18, r18
 49e:	b1 f0       	breq	.+44     	; 0x4cc <SCH_Update+0x88>
 4a0:	fc 01       	movw	r30, r24
 4a2:	ee 0f       	add	r30, r30
 4a4:	ff 1f       	adc	r31, r31
 4a6:	e8 0f       	add	r30, r24
 4a8:	f9 1f       	adc	r31, r25
 4aa:	ee 0f       	add	r30, r30
 4ac:	ff 1f       	adc	r31, r31
 4ae:	ee 59       	subi	r30, 0x9E	; 158
 4b0:	ff 4f       	sbci	r31, 0xFF	; 255
 4b2:	22 83       	std	Z+2, r18	; 0x02
 4b4:	0b c0       	rjmp	.+22     	; 0x4cc <SCH_Update+0x88>
 4b6:	fc 01       	movw	r30, r24
 4b8:	ee 0f       	add	r30, r30
 4ba:	ff 1f       	adc	r31, r31
 4bc:	e8 0f       	add	r30, r24
 4be:	f9 1f       	adc	r31, r25
 4c0:	ee 0f       	add	r30, r30
 4c2:	ff 1f       	adc	r31, r31
 4c4:	ee 59       	subi	r30, 0x9E	; 158
 4c6:	ff 4f       	sbci	r31, 0xFF	; 255
 4c8:	21 50       	subi	r18, 0x01	; 1
 4ca:	22 83       	std	Z+2, r18	; 0x02
 4cc:	01 96       	adiw	r24, 0x01	; 1
 4ce:	88 30       	cpi	r24, 0x08	; 8
 4d0:	91 05       	cpc	r25, r1
 4d2:	08 f4       	brcc	.+2      	; 0x4d6 <SCH_Update+0x92>
 4d4:	ba cf       	rjmp	.-140    	; 0x44a <SCH_Update+0x6>
 4d6:	08 95       	ret

Disassembly of section .text.__vector_7:

00000892 <__vector_7>:
#endif
}

//This is the scheduler ISR.
ISR ( TIMER1_COMPA_vect )
{
 892:	1f 92       	push	r1
 894:	0f 92       	push	r0
 896:	0f b6       	in	r0, 0x3f	; 63
 898:	0f 92       	push	r0
 89a:	11 24       	eor	r1, r1
 89c:	2f 93       	push	r18
 89e:	3f 93       	push	r19
 8a0:	4f 93       	push	r20
 8a2:	5f 93       	push	r21
 8a4:	6f 93       	push	r22
 8a6:	7f 93       	push	r23
 8a8:	8f 93       	push	r24
 8aa:	9f 93       	push	r25
 8ac:	af 93       	push	r26
 8ae:	bf 93       	push	r27
 8b0:	ef 93       	push	r30
 8b2:	ff 93       	push	r31
	if (current_state == HEATER_ON)
 8b4:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
 8b8:	81 30       	cpi	r24, 0x01	; 1
 8ba:	19 f4       	brne	.+6      	; 0x8c2 <__vector_7+0x30>
	{
		SCH_Update() ;
 8bc:	0e 94 22 02 	call	0x444	; 0x444 <SCH_Update>
 8c0:	03 c0       	rjmp	.+6      	; 0x8c8 <__vector_7+0x36>
	}
	else if(current_state == HEATER_OFF)
 8c2:	81 11       	cpse	r24, r1
 8c4:	01 c0       	rjmp	.+2      	; 0x8c8 <__vector_7+0x36>
	{
		cli() ;
 8c6:	f8 94       	cli
	}
}
 8c8:	ff 91       	pop	r31
 8ca:	ef 91       	pop	r30
 8cc:	bf 91       	pop	r27
 8ce:	af 91       	pop	r26
 8d0:	9f 91       	pop	r25
 8d2:	8f 91       	pop	r24
 8d4:	7f 91       	pop	r23
 8d6:	6f 91       	pop	r22
 8d8:	5f 91       	pop	r21
 8da:	4f 91       	pop	r20
 8dc:	3f 91       	pop	r19
 8de:	2f 91       	pop	r18
 8e0:	0f 90       	pop	r0
 8e2:	0f be       	out	0x3f, r0	; 63
 8e4:	0f 90       	pop	r0
 8e6:	1f 90       	pop	r1
 8e8:	18 95       	reti

Disassembly of section .text.SSD_TURN_OFF:

00000b3e <SSD_TURN_OFF>:
	SSD_TURN_OFF() ;
}

void SSD_TURN_OFF(void)
{
	GPIO_voidSetPortValue(SSD_PORT , 0x00) ;
 b3e:	60 e0       	ldi	r22, 0x00	; 0
 b40:	83 e0       	ldi	r24, 0x03	; 3
 b42:	0e 94 6f 05 	call	0xade	; 0xade <GPIO_voidSetPortValue>
	GPIO_voidSetPortPinValue(SSD_EN_PORT , SSD1_EN_PIN , 0) ;
 b46:	40 e0       	ldi	r20, 0x00	; 0
 b48:	63 e0       	ldi	r22, 0x03	; 3
 b4a:	82 e0       	ldi	r24, 0x02	; 2
 b4c:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <GPIO_voidSetPortPinValue>
	GPIO_voidSetPortPinValue(SSD_EN_PORT , SSD2_EN_PIN , 0) ;
 b50:	40 e0       	ldi	r20, 0x00	; 0
 b52:	64 e0       	ldi	r22, 0x04	; 4
 b54:	82 e0       	ldi	r24, 0x02	; 2
 b56:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <GPIO_voidSetPortPinValue>
 b5a:	08 95       	ret

Disassembly of section .text.SSD_Init:

00000a9c <SSD_Init>:

u8 ssd[] = { 0xc0, 0xf9, 0xa4, 0xb0, 0x99, 0x92, 0x82, 0xf8, 0x80, 0x90 } ;
	
void SSD_Init(void)
{
	GPIO_voidSetPortDirection(SSD_PORT , OUTPUT) ;	
 a9c:	61 e0       	ldi	r22, 0x01	; 1
 a9e:	83 e0       	ldi	r24, 0x03	; 3
 aa0:	0e 94 1d 04 	call	0x83a	; 0x83a <GPIO_voidSetPortDirection>
	GPIO_voidSetPortPinDirection(SSD_EN_PORT , SSD1_EN_PIN , OUTPUT) ;	
 aa4:	41 e0       	ldi	r20, 0x01	; 1
 aa6:	63 e0       	ldi	r22, 0x03	; 3
 aa8:	82 e0       	ldi	r24, 0x02	; 2
 aaa:	0e 94 63 00 	call	0xc6	; 0xc6 <_etext>
	GPIO_voidSetPortPinDirection(SSD_EN_PORT , SSD1_EN_PIN , OUTPUT) ;
 aae:	41 e0       	ldi	r20, 0x01	; 1
 ab0:	63 e0       	ldi	r22, 0x03	; 3
 ab2:	82 e0       	ldi	r24, 0x02	; 2
 ab4:	0e 94 63 00 	call	0xc6	; 0xc6 <_etext>
	
	SSD_TURN_OFF() ;
 ab8:	0e 94 9f 05 	call	0xb3e	; 0xb3e <SSD_TURN_OFF>
 abc:	08 95       	ret

Disassembly of section .text.SSD_BLINK:

00000a52 <SSD_BLINK>:
	GPIO_voidSetPortPinValue(SSD_EN_PORT , SSD2_EN_PIN , 1) ;
}*/

void SSD_BLINK(void)
{
	if( current_mode == SETTING_MODE )
 a52:	80 91 b5 00 	lds	r24, 0x00B5	; 0x8000b5 <current_mode>
 a56:	81 11       	cpse	r24, r1
 a58:	0e c0       	rjmp	.+28     	; 0xa76 <SSD_BLINK+0x24>
	{
		if (SSD_MODE == SSD_ON)
 a5a:	80 91 b7 00 	lds	r24, 0x00B7	; 0x8000b7 <SSD_MODE>
 a5e:	81 11       	cpse	r24, r1
 a60:	06 c0       	rjmp	.+12     	; 0xa6e <SSD_BLINK+0x1c>
		{
			SSD_MODE = SSD_OFF ;
 a62:	81 e0       	ldi	r24, 0x01	; 1
 a64:	80 93 b7 00 	sts	0x00B7, r24	; 0x8000b7 <SSD_MODE>
			SSD_TURN_OFF() ;
 a68:	0e 94 9f 05 	call	0xb3e	; 0xb3e <SSD_TURN_OFF>
 a6c:	08 95       	ret
		}
		else if (SSD_MODE == SSD_OFF)
 a6e:	81 30       	cpi	r24, 0x01	; 1
 a70:	11 f4       	brne	.+4      	; 0xa76 <SSD_BLINK+0x24>
		{
			SSD_MODE = SSD_ON ;
 a72:	10 92 b7 00 	sts	0x00B7, r1	; 0x8000b7 <SSD_MODE>
 a76:	08 95       	ret

Disassembly of section .text.segment7_display:

000004d8 <segment7_display>:
		}
	}
}

void segment7_display(u8 temp)
{		
 4d8:	cf 93       	push	r28
 4da:	df 93       	push	r29
	u16 disp1 , disp2 ;
	
	disp1 = ssd[temp / 10] ;
 4dc:	9d ec       	ldi	r25, 0xCD	; 205
 4de:	89 9f       	mul	r24, r25
 4e0:	91 2d       	mov	r25, r1
 4e2:	11 24       	eor	r1, r1
 4e4:	96 95       	lsr	r25
 4e6:	96 95       	lsr	r25
 4e8:	96 95       	lsr	r25
 4ea:	e9 2f       	mov	r30, r25
 4ec:	f0 e0       	ldi	r31, 0x00	; 0
 4ee:	ea 55       	subi	r30, 0x5A	; 90
 4f0:	ff 4f       	sbci	r31, 0xFF	; 255
 4f2:	d0 81       	ld	r29, Z
	disp2 = ssd[temp % 10] ;
 4f4:	99 0f       	add	r25, r25
 4f6:	29 2f       	mov	r18, r25
 4f8:	22 0f       	add	r18, r18
 4fa:	22 0f       	add	r18, r18
 4fc:	92 0f       	add	r25, r18
 4fe:	89 1b       	sub	r24, r25
 500:	e8 2f       	mov	r30, r24
 502:	f0 e0       	ldi	r31, 0x00	; 0
 504:	ea 55       	subi	r30, 0x5A	; 90
 506:	ff 4f       	sbci	r31, 0xFF	; 255
 508:	c0 81       	ld	r28, Z
	
	switch( SSD_Disp )
 50a:	80 91 b6 00 	lds	r24, 0x00B6	; 0x8000b6 <SSD_Disp>
 50e:	88 23       	and	r24, r24
 510:	19 f0       	breq	.+6      	; 0x518 <segment7_display+0x40>
 512:	81 30       	cpi	r24, 0x01	; 1
 514:	99 f0       	breq	.+38     	; 0x53c <segment7_display+0x64>
 516:	22 c0       	rjmp	.+68     	; 0x55c <segment7_display+0x84>
	{
		case SSD1 :
			GPIO_voidSetPortPinValue(SSD_EN_PORT , SSD1_EN_PIN , 1) ;
 518:	41 e0       	ldi	r20, 0x01	; 1
 51a:	63 e0       	ldi	r22, 0x03	; 3
 51c:	82 e0       	ldi	r24, 0x02	; 2
 51e:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <GPIO_voidSetPortPinValue>
			GPIO_voidSetPortPinValue(SSD_EN_PORT , SSD2_EN_PIN , 0) ;
 522:	40 e0       	ldi	r20, 0x00	; 0
 524:	64 e0       	ldi	r22, 0x04	; 4
 526:	82 e0       	ldi	r24, 0x02	; 2
 528:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <GPIO_voidSetPortPinValue>
			GPIO_voidSetPortValue(SSD_PORT , disp1) ;
 52c:	6d 2f       	mov	r22, r29
 52e:	83 e0       	ldi	r24, 0x03	; 3
 530:	0e 94 6f 05 	call	0xade	; 0xade <GPIO_voidSetPortValue>
			SSD_Disp = SSD2 ;
 534:	81 e0       	ldi	r24, 0x01	; 1
 536:	80 93 b6 00 	sts	0x00B6, r24	; 0x8000b6 <SSD_Disp>
			break;
 53a:	10 c0       	rjmp	.+32     	; 0x55c <segment7_display+0x84>
		
		case SSD2 :
			GPIO_voidSetPortPinValue(SSD_EN_PORT , SSD2_EN_PIN , 1) ;
 53c:	41 e0       	ldi	r20, 0x01	; 1
 53e:	64 e0       	ldi	r22, 0x04	; 4
 540:	82 e0       	ldi	r24, 0x02	; 2
 542:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <GPIO_voidSetPortPinValue>
			GPIO_voidSetPortPinValue(SSD_EN_PORT , SSD1_EN_PIN , 0) ;
 546:	40 e0       	ldi	r20, 0x00	; 0
 548:	63 e0       	ldi	r22, 0x03	; 3
 54a:	82 e0       	ldi	r24, 0x02	; 2
 54c:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <GPIO_voidSetPortPinValue>
			GPIO_voidSetPortValue(SSD_PORT , disp2) ;
 550:	6c 2f       	mov	r22, r28
 552:	83 e0       	ldi	r24, 0x03	; 3
 554:	0e 94 6f 05 	call	0xade	; 0xade <GPIO_voidSetPortValue>
			SSD_Disp = SSD1 ;
 558:	10 92 b6 00 	sts	0x00B6, r1	; 0x8000b6 <SSD_Disp>
			break;
		
		default:
			break;
	}
}
 55c:	df 91       	pop	r29
 55e:	cf 91       	pop	r28
 560:	08 95       	ret

Disassembly of section .text.SSD_UPDATE:

00000b1e <SSD_UPDATE>:

void SSD_UPDATE(void)
{
	u16 tem = Get_Current_Temp() ;
 b1e:	0e 94 35 06 	call	0xc6a	; 0xc6a <Get_Current_Temp>
	
	switch(current_mode)
 b22:	90 91 b5 00 	lds	r25, 0x00B5	; 0x8000b5 <current_mode>
 b26:	99 23       	and	r25, r25
 b28:	39 f0       	breq	.+14     	; 0xb38 <SSD_UPDATE+0x1a>
 b2a:	91 30       	cpi	r25, 0x01	; 1
 b2c:	39 f4       	brne	.+14     	; 0xb3c <SSD_UPDATE+0x1e>
	{
		case NORMAL_MODE :
			segment7_display( sensed_temp ) ;
 b2e:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <sensed_temp>
 b32:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <segment7_display>
			break;
 b36:	08 95       	ret
		
		case SETTING_MODE :
			segment7_display( tem ) ;
 b38:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <segment7_display>
 b3c:	08 95       	ret

Disassembly of section .text.SW_Init:

0000097c <SW_Init>:

extern u8 sensed_temp ;

void SW_Init(void)
{		
	GPIO_voidSetPortPinDirection(UP_PORT , UP_PIN , UP_DIR) ;
 97c:	40 e0       	ldi	r20, 0x00	; 0
 97e:	63 e0       	ldi	r22, 0x03	; 3
 980:	81 e0       	ldi	r24, 0x01	; 1
 982:	0e 94 63 00 	call	0xc6	; 0xc6 <_etext>
	GPIO_voidSetPortPinDirection(DOWN_PORT , DOWN_PIN , DOWN_DIR) ;
 986:	40 e0       	ldi	r20, 0x00	; 0
 988:	64 e0       	ldi	r22, 0x04	; 4
 98a:	81 e0       	ldi	r24, 0x01	; 1
 98c:	0e 94 63 00 	call	0xc6	; 0xc6 <_etext>
	GPIO_voidSetPortPinDirection(ON_OFF_PORT , ON_OFF_PIN , ON_OFF_PIN) ;
 990:	42 e0       	ldi	r20, 0x02	; 2
 992:	62 e0       	ldi	r22, 0x02	; 2
 994:	81 e0       	ldi	r24, 0x01	; 1
 996:	0e 94 63 00 	call	0xc6	; 0xc6 <_etext>
	
	GPIO_voidSetPortPinValue(UP_PORT , UP_PIN , 1) ;
 99a:	41 e0       	ldi	r20, 0x01	; 1
 99c:	63 e0       	ldi	r22, 0x03	; 3
 99e:	81 e0       	ldi	r24, 0x01	; 1
 9a0:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <GPIO_voidSetPortPinValue>
	GPIO_voidSetPortPinValue(DOWN_PORT , DOWN_PIN , 1) ;
 9a4:	41 e0       	ldi	r20, 0x01	; 1
 9a6:	64 e0       	ldi	r22, 0x04	; 4
 9a8:	81 e0       	ldi	r24, 0x01	; 1
 9aa:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <GPIO_voidSetPortPinValue>

	current_mode = NORMAL_MODE ;
 9ae:	81 e0       	ldi	r24, 0x01	; 1
 9b0:	80 93 b5 00 	sts	0x00B5, r24	; 0x8000b5 <current_mode>
	set_temp = INITIAL_TEMP ;
 9b4:	8c e3       	ldi	r24, 0x3C	; 60
 9b6:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <set_temp>
	
	Save_Last_Temp() ;
 9ba:	0e 94 1d 06 	call	0xc3a	; 0xc3a <Save_Last_Temp>
 9be:	08 95       	ret

Disassembly of section .text.Heat_Cool_Elements:

000005d4 <Heat_Cool_Elements>:
}

void Heat_Cool_Elements(void)
{
	if ( current_mode == NORMAL_MODE )
 5d4:	80 91 b5 00 	lds	r24, 0x00B5	; 0x8000b5 <current_mode>
 5d8:	81 30       	cpi	r24, 0x01	; 1
 5da:	59 f5       	brne	.+86     	; 0x632 <Heat_Cool_Elements+0x5e>
	{
		if ( sensed_temp < (set_temp - TEMP_CHANGE) )
 5dc:	20 91 61 00 	lds	r18, 0x0061	; 0x800061 <sensed_temp>
 5e0:	30 e0       	ldi	r19, 0x00	; 0
 5e2:	80 91 b8 00 	lds	r24, 0x00B8	; 0x8000b8 <set_temp>
 5e6:	90 e0       	ldi	r25, 0x00	; 0
 5e8:	ac 01       	movw	r20, r24
 5ea:	45 50       	subi	r20, 0x05	; 5
 5ec:	51 09       	sbc	r21, r1
 5ee:	24 17       	cp	r18, r20
 5f0:	35 07       	cpc	r19, r21
 5f2:	4c f4       	brge	.+18     	; 0x606 <Heat_Cool_Elements+0x32>
		{
			heating_set_state(heat_ON) ;
 5f4:	81 e0       	ldi	r24, 0x01	; 1
 5f6:	0e 94 7f 05 	call	0xafe	; 0xafe <heating_set_state>
			cooling_set_state(cool_OFF) ;
 5fa:	80 e0       	ldi	r24, 0x00	; 0
 5fc:	0e 94 5f 05 	call	0xabe	; 0xabe <cooling_set_state>
			LED_Blink() ;
 600:	0e 94 23 06 	call	0xc46	; 0xc46 <LED_Blink>
 604:	08 95       	ret
		}
		else if ( sensed_temp > (set_temp + TEMP_CHANGE) )
 606:	05 96       	adiw	r24, 0x05	; 5
 608:	82 17       	cp	r24, r18
 60a:	93 07       	cpc	r25, r19
 60c:	4c f4       	brge	.+18     	; 0x620 <Heat_Cool_Elements+0x4c>
		{
			heating_set_state(heat_OFF) ;
 60e:	80 e0       	ldi	r24, 0x00	; 0
 610:	0e 94 7f 05 	call	0xafe	; 0xafe <heating_set_state>
			cooling_set_state(cool_ON) ;
 614:	81 e0       	ldi	r24, 0x01	; 1
 616:	0e 94 5f 05 	call	0xabe	; 0xabe <cooling_set_state>
			LED_ON() ;
 61a:	0e 94 11 06 	call	0xc22	; 0xc22 <LED_ON>
 61e:	08 95       	ret
		}
		else
		{
			heating_set_state(heat_OFF) ;
 620:	80 e0       	ldi	r24, 0x00	; 0
 622:	0e 94 7f 05 	call	0xafe	; 0xafe <heating_set_state>
			cooling_set_state(cool_OFF) ;
 626:	80 e0       	ldi	r24, 0x00	; 0
 628:	0e 94 5f 05 	call	0xabe	; 0xabe <cooling_set_state>
			LED_OFF() ;
 62c:	0e 94 17 06 	call	0xc2e	; 0xc2e <LED_OFF>
 630:	08 95       	ret
		}
	}
	else
	{
		heating_set_state(heat_OFF) ;
 632:	80 e0       	ldi	r24, 0x00	; 0
 634:	0e 94 7f 05 	call	0xafe	; 0xafe <heating_set_state>
		cooling_set_state(cool_OFF) ;
 638:	80 e0       	ldi	r24, 0x00	; 0
 63a:	0e 94 5f 05 	call	0xabe	; 0xabe <cooling_set_state>
		LED_OFF() ;
 63e:	0e 94 17 06 	call	0xc2e	; 0xc2e <LED_OFF>
 642:	08 95       	ret

Disassembly of section .text.Get_Current_Temp:

00000c6a <Get_Current_Temp>:
}

u8 Get_Current_Temp(void)
{
	return set_temp ;
}
 c6a:	80 91 b8 00 	lds	r24, 0x00B8	; 0x8000b8 <set_temp>
 c6e:	08 95       	ret

Disassembly of section .text.SW_ST:

0000029a <SW_ST>:

void SW_ST(void)
{
	switch ( current_mode )
 29a:	80 91 b5 00 	lds	r24, 0x00B5	; 0x8000b5 <current_mode>
 29e:	88 23       	and	r24, r24
 2a0:	f9 f0       	breq	.+62     	; 0x2e0 <SW_ST+0x46>
 2a2:	81 30       	cpi	r24, 0x01	; 1
 2a4:	09 f0       	breq	.+2      	; 0x2a8 <SW_ST+0xe>
 2a6:	64 c0       	rjmp	.+200    	; 0x370 <SW_ST+0xd6>
	{
		case NORMAL_MODE :
			setting_state_flag = 0 ;
 2a8:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <setting_state_flag+0x1>
 2ac:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <setting_state_flag>
			segment7_display(sensed_temp) ;
 2b0:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <sensed_temp>
 2b4:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <segment7_display>
			if ( (GPIO_u8GetPortValue(UP_PORT) == 0b00010000) || (GPIO_u8GetPortValue(DOWN_PORT) == 0b00001000) )
 2b8:	81 e0       	ldi	r24, 0x01	; 1
 2ba:	0e 94 3c 05 	call	0xa78	; 0xa78 <GPIO_u8GetPortValue>
 2be:	80 31       	cpi	r24, 0x10	; 16
 2c0:	31 f0       	breq	.+12     	; 0x2ce <SW_ST+0x34>
 2c2:	81 e0       	ldi	r24, 0x01	; 1
 2c4:	0e 94 3c 05 	call	0xa78	; 0xa78 <GPIO_u8GetPortValue>
 2c8:	88 30       	cpi	r24, 0x08	; 8
 2ca:	09 f0       	breq	.+2      	; 0x2ce <SW_ST+0x34>
 2cc:	51 c0       	rjmp	.+162    	; 0x370 <SW_ST+0xd6>
			{
				current_mode = SETTING_MODE ;
 2ce:	10 92 b5 00 	sts	0x00B5, r1	; 0x8000b5 <current_mode>
				cooling_set_state(cool_OFF) ;
 2d2:	80 e0       	ldi	r24, 0x00	; 0
 2d4:	0e 94 5f 05 	call	0xabe	; 0xabe <cooling_set_state>
				heating_set_state(heat_OFF) ;
 2d8:	80 e0       	ldi	r24, 0x00	; 0
 2da:	0e 94 7f 05 	call	0xafe	; 0xafe <heating_set_state>
 2de:	08 95       	ret
			}
			break;
		
		case SETTING_MODE :
		{
			segment7_display(set_temp) ;
 2e0:	80 91 b8 00 	lds	r24, 0x00B8	; 0x8000b8 <set_temp>
 2e4:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <segment7_display>
			
			if ( setting_state_flag < 500 )
 2e8:	80 91 b2 00 	lds	r24, 0x00B2	; 0x8000b2 <setting_state_flag>
 2ec:	90 91 b3 00 	lds	r25, 0x00B3	; 0x8000b3 <setting_state_flag+0x1>
 2f0:	84 3f       	cpi	r24, 0xF4	; 244
 2f2:	91 40       	sbci	r25, 0x01	; 1
 2f4:	80 f5       	brcc	.+96     	; 0x356 <SW_ST+0xbc>
			{
				if ( (set_temp < MAX_TEMP) && (GPIO_u8GetPortValue(UP_PORT) == 0b00001000) )
 2f6:	80 91 b8 00 	lds	r24, 0x00B8	; 0x8000b8 <set_temp>
 2fa:	8b 34       	cpi	r24, 0x4B	; 75
 2fc:	78 f4       	brcc	.+30     	; 0x31c <SW_ST+0x82>
 2fe:	81 e0       	ldi	r24, 0x01	; 1
 300:	0e 94 3c 05 	call	0xa78	; 0xa78 <GPIO_u8GetPortValue>
 304:	88 30       	cpi	r24, 0x08	; 8
 306:	51 f4       	brne	.+20     	; 0x31c <SW_ST+0x82>
				{
					set_temp += TEMP_CHANGE ;
 308:	80 91 b8 00 	lds	r24, 0x00B8	; 0x8000b8 <set_temp>
 30c:	8b 5f       	subi	r24, 0xFB	; 251
 30e:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <set_temp>
					setting_state_flag = 0 ;
 312:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <setting_state_flag+0x1>
 316:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <setting_state_flag>
 31a:	08 95       	ret
				}
				else if ( (set_temp > MIN_TEMP) && (GPIO_u8GetPortValue(DOWN_PORT) == 0b00010000) )
 31c:	80 91 b8 00 	lds	r24, 0x00B8	; 0x8000b8 <set_temp>
 320:	84 32       	cpi	r24, 0x24	; 36
 322:	78 f0       	brcs	.+30     	; 0x342 <SW_ST+0xa8>
 324:	81 e0       	ldi	r24, 0x01	; 1
 326:	0e 94 3c 05 	call	0xa78	; 0xa78 <GPIO_u8GetPortValue>
 32a:	80 31       	cpi	r24, 0x10	; 16
 32c:	51 f4       	brne	.+20     	; 0x342 <SW_ST+0xa8>
				{
					set_temp -= TEMP_CHANGE ;
 32e:	80 91 b8 00 	lds	r24, 0x00B8	; 0x8000b8 <set_temp>
 332:	85 50       	subi	r24, 0x05	; 5
 334:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <set_temp>
					setting_state_flag = 0 ;
 338:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <setting_state_flag+0x1>
 33c:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <setting_state_flag>
 340:	08 95       	ret
				}
				else
				{
					setting_state_flag += 20 ;
 342:	80 91 b2 00 	lds	r24, 0x00B2	; 0x8000b2 <setting_state_flag>
 346:	90 91 b3 00 	lds	r25, 0x00B3	; 0x8000b3 <setting_state_flag+0x1>
 34a:	44 96       	adiw	r24, 0x14	; 20
 34c:	90 93 b3 00 	sts	0x00B3, r25	; 0x8000b3 <setting_state_flag+0x1>
 350:	80 93 b2 00 	sts	0x00B2, r24	; 0x8000b2 <setting_state_flag>
 354:	08 95       	ret
				}
			}
			else
			{
				current_mode = NORMAL_MODE ;
 356:	81 e0       	ldi	r24, 0x01	; 1
 358:	80 93 b5 00 	sts	0x00B5, r24	; 0x8000b5 <current_mode>
				setting_state_flag = 0 ;
 35c:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <setting_state_flag+0x1>
 360:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <setting_state_flag>
				Save_Last_Temp() ;
 364:	0e 94 1d 06 	call	0xc3a	; 0xc3a <Save_Last_Temp>
				segment7_display(sensed_temp) ;
 368:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <sensed_temp>
 36c:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <segment7_display>
 370:	08 95       	ret

Disassembly of section .text.libgcc.mul:

00000b5c <__umulhisi3>:
 b5c:	a2 9f       	mul	r26, r18
 b5e:	b0 01       	movw	r22, r0
 b60:	b3 9f       	mul	r27, r19
 b62:	c0 01       	movw	r24, r0
 b64:	a3 9f       	mul	r26, r19
 b66:	70 0d       	add	r23, r0
 b68:	81 1d       	adc	r24, r1
 b6a:	11 24       	eor	r1, r1
 b6c:	91 1d       	adc	r25, r1
 b6e:	b2 9f       	mul	r27, r18
 b70:	70 0d       	add	r23, r0
 b72:	81 1d       	adc	r24, r1
 b74:	11 24       	eor	r1, r1
 b76:	91 1d       	adc	r25, r1
 b78:	08 95       	ret
